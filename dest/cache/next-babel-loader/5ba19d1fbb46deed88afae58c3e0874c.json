{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\index.jsx\";\nimport { connect } from 'react-redux';\nimport api from '../utils/api';\n\nconst Index = ({\n  userRepos,\n  ctx\n}) => {\n  console.log('ctx', ctx);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nIndex.getInitialProps = async ({\n  ctx\n}) => {\n  const result = await api.request({\n    url: `/user/repos`\n  }, ctx.req, ctx.res);\n  return {\n    userRepos: result.data,\n    ctx\n  };\n};\n\nexport default connect(state => ({\n  user: state.user\n}))(Index);","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/index.jsx"],"names":["connect","api","Index","userRepos","ctx","console","log","getInitialProps","result","request","url","req","res","data","state","user"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAwB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAPD;;AASAF,KAAK,CAACK,eAAN,GAAwB,OAAO;AAAEH,EAAAA;AAAF,CAAP,KAAmB;AACzC,QAAMI,MAAM,GAAG,MAAMP,GAAG,CAACQ,OAAJ,CAAY;AAAEC,IAAAA,GAAG,EAAG;AAAR,GAAZ,EAAoCN,GAAG,CAACO,GAAxC,EAA6CP,GAAG,CAACQ,GAAjD,CAArB;AACA,SAAO;AACLT,IAAAA,SAAS,EAAEK,MAAM,CAACK,IADb;AAELT,IAAAA;AAFK,GAAP;AAID,CAND;;AAQA,eAAeJ,OAAO,CAACc,KAAK,KAAK;AAAEC,EAAAA,IAAI,EAAED,KAAK,CAACC;AAAd,CAAL,CAAN,CAAP,CAAyCb,KAAzC,CAAf","sourcesContent":["import { connect } from 'react-redux';\r\nimport api from '../utils/api';\r\n\r\nconst Index = ({ userRepos, ctx }) => {\r\n  console.log('ctx', ctx);\r\n  return (\r\n    <>\r\n      <span>index</span>\r\n    </>\r\n  );\r\n};\r\n\r\nIndex.getInitialProps = async ({ ctx }) => {\r\n  const result = await api.request({ url: `/user/repos` }, ctx.req, ctx.res);\r\n  return {\r\n    userRepos: result.data,\r\n    ctx,\r\n  };\r\n};\r\n\r\nexport default connect(state => ({ user: state.user }))(Index);\r\n"]},"metadata":{},"sourceType":"module"}