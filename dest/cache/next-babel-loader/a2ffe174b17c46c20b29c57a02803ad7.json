{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\utils\\\\with-redux-app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\nimport React from 'react';\nimport initializeStore from '../redux/store';\nconst isServer = true;\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端执行时都重新创建一个store\n    return initializeStore(initialState);\n  }\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nconst withRedux = Comp => {\n  function withReduxApp(props) {\n    const {\n      Component,\n      pageProps,\n      initialReduxState,\n      ctx\n    } = props,\n          rest = _objectWithoutProperties(props, [\"Component\", \"pageProps\", \"initialReduxState\", \"ctx\"]);\n\n    console.log('with-redux', ctx);\n    return /*#__PURE__*/_jsxDEV(Comp, _objectSpread({\n      Component: Component,\n      pageProps: pageProps,\n      reduxStore: getOrCreateStore(initialReduxState)\n    }, rest), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  withReduxApp.getInitialProps = async context => {\n    let reduxStore; // 只有在服务端的时候，req才存在\n\n    if (isServer) {\n      const req = context.ctx.req; // const {\n      //   ctx: { req },\n      // } = ctx;\n\n      const {\n        session\n      } = req;\n\n      if (session && session.userInfo) {\n        reduxStore = getOrCreateStore({\n          user: session.userInfo\n        });\n      } else {\n        reduxStore = getOrCreateStore();\n      }\n    } else {\n      reduxStore = getOrCreateStore();\n    }\n\n    context.reduxStore = reduxStore;\n    console.log('context', context);\n    let appProps = {};\n\n    if (typeof Comp.getInitialProps === 'function') {\n      appProps = await Comp.getInitialProps(ctx);\n    }\n\n    return _objectSpread(_objectSpread({}, appProps), {}, {\n      initialReduxState: reduxStore.getState()\n    });\n  };\n\n  return withReduxApp;\n};\n\nexport default withRedux;","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/with-redux-app.js"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","withRedux","Comp","withReduxApp","props","Component","pageProps","initialReduxState","ctx","rest","console","log","getInitialProps","context","reduxStore","req","session","userInfo","user","appProps","getState"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAAqD;;AAErD,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC,MAAIH,QAAJ,EAAc;AACZ;AACA,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACD;;AACD,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AACjCG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACD;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACD;;AAED,MAAMI,SAAS,GAAGC,IAAI,IAAI;AACxB,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA,iBAAxB;AAA2CC,MAAAA;AAA3C,QAA4DJ,KAAlE;AAAA,UAAyDK,IAAzD,4BAAkEL,KAAlE;;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,GAA1B;AACA,wBACE,QAAC,IAAD;AACE,MAAA,SAAS,EAAEH,SADb;AAEE,MAAA,SAAS,EAAEC,SAFb;AAGE,MAAA,UAAU,EAAER,gBAAgB,CAACS,iBAAD;AAH9B,OAIME,IAJN;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AACDN,EAAAA,YAAY,CAACS,eAAb,GAA+B,MAAMC,OAAN,IAAiB;AAC9C,QAAIC,UAAJ,CAD8C,CAE9C;;AACA,QAAIlB,QAAJ,EAAc;AACZ,YAAMmB,GAAG,GAAGF,OAAO,CAACL,GAAR,CAAYO,GAAxB,CADY,CAEZ;AACA;AACA;;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAcD,GAApB;;AACA,UAAIC,OAAO,IAAIA,OAAO,CAACC,QAAvB,EAAiC;AAC/BH,QAAAA,UAAU,GAAGhB,gBAAgB,CAAC;AAC5BoB,UAAAA,IAAI,EAAEF,OAAO,CAACC;AADc,SAAD,CAA7B;AAGD,OAJD,MAIO;AACLH,QAAAA,UAAU,GAAGhB,gBAAgB,EAA7B;AACD;AACF,KAbD,MAaO;AACLgB,MAAAA,UAAU,GAAGhB,gBAAgB,EAA7B;AACD;;AAEDe,IAAAA,OAAO,CAACC,UAAR,GAAqBA,UAArB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,OAAvB;AAEA,QAAIM,QAAQ,GAAG,EAAf;;AACA,QAAI,OAAOjB,IAAI,CAACU,eAAZ,KAAgC,UAApC,EAAgD;AAC9CO,MAAAA,QAAQ,GAAG,MAAMjB,IAAI,CAACU,eAAL,CAAqBJ,GAArB,CAAjB;AACD;;AAED,2CACKW,QADL;AAEEZ,MAAAA,iBAAiB,EAAEO,UAAU,CAACM,QAAX;AAFrB;AAID,GAhCD;;AAiCA,SAAOjB,YAAP;AACD,CA/CD;;AAiDA,eAAeF,SAAf","sourcesContent":["/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\r\nimport React from 'react';\r\nimport initializeStore from '../redux/store';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\r\n\r\nfunction getOrCreateStore(initialState) {\r\n  if (isServer) {\r\n    // 服务端执行时都重新创建一个store\r\n    return initializeStore(initialState);\r\n  }\r\n  if (!window[__NEXT_REDUX_STORE__]) {\r\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n  }\r\n  return window[__NEXT_REDUX_STORE__];\r\n}\r\n\r\nconst withRedux = Comp => {\r\n  function withReduxApp(props) {\r\n    const { Component, pageProps, initialReduxState, ctx, ...rest } = props;\r\n    console.log('with-redux', ctx);\r\n    return (\r\n      <Comp\r\n        Component={Component}\r\n        pageProps={pageProps}\r\n        reduxStore={getOrCreateStore(initialReduxState)}\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n  withReduxApp.getInitialProps = async context => {\r\n    let reduxStore;\r\n    // 只有在服务端的时候，req才存在\r\n    if (isServer) {\r\n      const req = context.ctx.req;\r\n      // const {\r\n      //   ctx: { req },\r\n      // } = ctx;\r\n      const { session } = req;\r\n      if (session && session.userInfo) {\r\n        reduxStore = getOrCreateStore({\r\n          user: session.userInfo,\r\n        });\r\n      } else {\r\n        reduxStore = getOrCreateStore();\r\n      }\r\n    } else {\r\n      reduxStore = getOrCreateStore();\r\n    }\r\n\r\n    context.reduxStore = reduxStore;\r\n    console.log('context', context);\r\n\r\n    let appProps = {};\r\n    if (typeof Comp.getInitialProps === 'function') {\r\n      appProps = await Comp.getInitialProps(ctx);\r\n    }\r\n\r\n    return {\r\n      ...appProps,\r\n      initialReduxState: reduxStore.getState(),\r\n    };\r\n  };\r\n  return withReduxApp;\r\n};\r\n\r\nexport default withRedux;\r\n"]},"metadata":{},"sourceType":"module"}