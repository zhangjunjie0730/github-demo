{"ast":null,"code":"import _defineProperty from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { createStore, combineReducers, applyMiddleware } from 'redux';\n// import thunk from 'redux-thunk';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import { userReducer, userInitialState } from './reducers';\n// const rootReducers = combineReducers({ user: userReducer });\n// /**\n//  * 为什么要导出一个初始化store的方法呢？\n//  * 服务器启动后，所有js都现加载，认为他们是一个模块，这个模块再服务器启动后就已经设定好了。\n//  * 如果不重启服务器，每一次服务端渲染都会使用同一个store对象，这就导致我们的状态改变时不会进行重置\n//  * 如果按照以前的方式export，store会被共用。\n//  * 解决办法：每次渲染时都创建新的store，所以就把with-redux-app这个高阶组件加到根_App中。\n//  */\n// export default function initializeStore(state) {\n//   const store = createStore(\n//     rootReducers,\n//     { ...userInitialState, ...state },\n//     composeWithDevTools(applyMiddleware(thunk))\n//   );\n//   return store;\n// }\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { message } from 'antd';\nimport axios from 'axios';\nvar LOGOUT = 'logout';\nvar userInitialState = {};\n\nfunction userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOGOUT:\n      {\n        return {};\n      }\n\n    default:\n      return state;\n  }\n}\n\nvar allReducers = combineReducers({\n  user: userReducer\n});\nexport function logout() {\n  return function (dispatch) {\n    axios.post('/logout').then(function (resp) {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n        message.success('注销成功');\n      } else {\n        console.log('logout failed', resp);\n      }\n    })[\"catch\"](function (e) {\n      console.log('logout failed', e);\n    });\n  };\n}\nexport default function initializeStore(state) {\n  var store = createStore(allReducers, _objectSpread(_objectSpread({}, userInitialState), state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["E:/MyGit/github-demo/redux/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","message","axios","LOGOUT","userInitialState","userReducer","state","action","type","allReducers","user","logout","dispatch","post","then","resp","status","success","console","log","e","initializeStore","store"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,MAAM,GAAG,QAAf;AAEA,IAAMC,gBAAgB,GAAG,EAAzB;;AAEA,SAASC,WAAT,GAAuD;AAAA,MAAlCC,KAAkC,uEAA1BF,gBAA0B;AAAA,MAARG,MAAQ;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,MAAL;AAAa;AACX,eAAO,EAAP;AACD;;AACD;AACE,aAAOG,KAAP;AALJ;AAOD;;AAED,IAAMG,WAAW,GAAGZ,eAAe,CAAC;AAClCa,EAAAA,IAAI,EAAEL;AAD4B,CAAD,CAAnC;AAIA,OAAO,SAASM,MAAT,GAAkB;AACvB,SAAO,UAAAC,QAAQ,EAAI;AACjBV,IAAAA,KAAK,CACFW,IADH,CACQ,SADR,EAEGC,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACZ,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACvBJ,QAAAA,QAAQ,CAAC;AACPJ,UAAAA,IAAI,EAAEL;AADC,SAAD,CAAR;AAGAF,QAAAA,OAAO,CAACgB,OAAR,CAAgB,MAAhB;AACD,OALD,MAKO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,IAA7B;AACD;AACF,KAXH,WAYS,UAAAK,CAAC,EAAI;AACVF,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,CAA7B;AACD,KAdH;AAeD,GAhBD;AAiBD;AAED,eAAe,SAASC,eAAT,CAAyBf,KAAzB,EAAgC;AAC7C,MAAMgB,KAAK,GAAG1B,WAAW,CACvBa,WADuB,kCAElBL,gBAFkB,GAEGE,KAFH,GAGvBN,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAHI,CAAzB;AAKA,SAAOuB,KAAP;AACD","sourcesContent":["// import { createStore, combineReducers, applyMiddleware } from 'redux';\r\n// import thunk from 'redux-thunk';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// import { userReducer, userInitialState } from './reducers';\r\n\r\n// const rootReducers = combineReducers({ user: userReducer });\r\n\r\n// /**\r\n//  * 为什么要导出一个初始化store的方法呢？\r\n//  * 服务器启动后，所有js都现加载，认为他们是一个模块，这个模块再服务器启动后就已经设定好了。\r\n//  * 如果不重启服务器，每一次服务端渲染都会使用同一个store对象，这就导致我们的状态改变时不会进行重置\r\n//  * 如果按照以前的方式export，store会被共用。\r\n//  * 解决办法：每次渲染时都创建新的store，所以就把with-redux-app这个高阶组件加到根_App中。\r\n//  */\r\n\r\n// export default function initializeStore(state) {\r\n//   const store = createStore(\r\n//     rootReducers,\r\n//     { ...userInitialState, ...state },\r\n//     composeWithDevTools(applyMiddleware(thunk))\r\n//   );\r\n//   return store;\r\n// }\r\n\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { message } from 'antd';\r\nimport axios from 'axios';\r\n\r\nconst LOGOUT = 'logout';\r\n\r\nconst userInitialState = {};\r\n\r\nfunction userReducer(state = userInitialState, action) {\r\n  switch (action.type) {\r\n    case LOGOUT: {\r\n      return {};\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n  user: userReducer,\r\n});\r\n\r\nexport function logout() {\r\n  return dispatch => {\r\n    axios\r\n      .post('/logout')\r\n      .then(resp => {\r\n        if (resp.status === 200) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n          });\r\n          message.success('注销成功');\r\n        } else {\r\n          console.log('logout failed', resp);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        console.log('logout failed', e);\r\n      });\r\n  };\r\n}\r\n\r\nexport default function initializeStore(state) {\r\n  const store = createStore(\r\n    allReducers,\r\n    { ...userInitialState, ...state },\r\n    composeWithDevTools(applyMiddleware(ReduxThunk))\r\n  );\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}