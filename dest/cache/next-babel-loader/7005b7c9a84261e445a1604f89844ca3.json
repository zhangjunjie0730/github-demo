{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\components\\\\SearchUser\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Select, Spin } from 'antd';\nimport { debounce } from 'lodash';\nimport { useCallback, useRef, useState } from 'react';\nimport { request } from '../../utils/api';\n\nfunction SearchUser(_ref) {\n  _s();\n\n  var _this = this;\n\n  var onChange = _ref.onChange,\n      value = _ref.value,\n      style = _ref.style;\n\n  var _useState = useState(false),\n      fetching = _useState[0],\n      setFetching = _useState[1];\n\n  var _useState2 = useState([]),\n      options = _useState2[0],\n      setOptions = _useState2[1]; // 对比前后请求id是否相同，如果不同说明网络延迟有多次请求，当前的请求作废\n\n\n  var lastFetchIdRef = useRef(0);\n  var fetchUser = useCallback(debounce( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(searchValue, fetchId) {\n      var _yield$request, data, userOptions;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setFetching(true);\n              setOptions([]);\n              _context.next = 4;\n              return request({\n                url: \"/search/users?q=\".concat(searchValue)\n              });\n\n            case 4:\n              _yield$request = _context.sent;\n              data = _yield$request.data;\n              // 客户端发送请求就不需要req和res了\n              userOptions = data.items.map(function (user) {\n                return {\n                  text: user.login,\n                  value: user.login\n                };\n              });\n\n              if (fetchId === lastFetchIdRef.current) {\n                setOptions(userOptions);\n              } else {\n                // 不相等跳过当前请求，继续下一次发送\n                setOptions([]);\n              }\n\n              setFetching(false);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), 500), []);\n\n  var fetchUserBefore = function fetchUserBefore(searchValue) {\n    lastFetchIdRef.current += 1;\n    if (searchValue.trim()) return fetchUser(searchValue, lastFetchIdRef.current);\n    return null;\n  };\n\n  var handleChange = function handleChange(searchValue) {\n    onChange(searchValue);\n    setOptions([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    allowClear: true,\n    showSearch: true,\n    value: value,\n    onChange: handleChange,\n    onSearch: fetchUserBefore,\n    notFoundContent: fetching ? /*#__PURE__*/_jsxDEV(Spin, {\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 35\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 59\n    }, this),\n    filterOption: false // 禁用本地搜索\n    ,\n    placeholder: \"\\u521B\\u5EFA\\u8005\",\n    style: _objectSpread({\n      width: 200\n    }, style),\n    children: options.map(function (option) {\n      return /*#__PURE__*/_jsxDEV(Select.Option, {\n        value: option.value,\n        children: option.text\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchUser, \"t7221cDBBqotOs9CBcLoV0ghUdo=\");\n\n_c = SearchUser;\nexport default SearchUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchUser\");","map":{"version":3,"sources":["E:/MyGit/github-demo/components/SearchUser/index.jsx"],"names":["Select","Spin","debounce","useCallback","useRef","useState","request","SearchUser","onChange","value","style","fetching","setFetching","options","setOptions","lastFetchIdRef","fetchUser","searchValue","fetchId","url","data","userOptions","items","map","user","text","login","current","fetchUserBefore","trim","handleChange","width","option"],"mappings":"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","sourcesContent":["import { Select, Spin } from 'antd';\r\nimport { debounce } from 'lodash';\r\nimport { useCallback, useRef, useState } from 'react';\r\nimport { request } from '../../utils/api';\r\n\r\nfunction SearchUser({ onChange, value, style }) {\r\n  const [fetching, setFetching] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  // 对比前后请求id是否相同，如果不同说明网络延迟有多次请求，当前的请求作废\r\n  const lastFetchIdRef = useRef(0);\r\n\r\n  const fetchUser = useCallback(\r\n    debounce(async (searchValue, fetchId) => {\r\n      setFetching(true);\r\n      setOptions([]);\r\n      const { data } = await request({ url: `/search/users?q=${searchValue}` }); // 客户端发送请求就不需要req和res了\r\n      const userOptions = data.items.map(user => ({ text: user.login, value: user.login }));\r\n\r\n      if (fetchId === lastFetchIdRef.current) {\r\n        setOptions(userOptions);\r\n      } else {\r\n        // 不相等跳过当前请求，继续下一次发送\r\n        setOptions([]);\r\n      }\r\n      setFetching(false);\r\n    }, 500),\r\n    []\r\n  );\r\n\r\n  const fetchUserBefore = searchValue => {\r\n    lastFetchIdRef.current += 1;\r\n    if (searchValue.trim()) return fetchUser(searchValue, lastFetchIdRef.current);\r\n    return null;\r\n  };\r\n\r\n  const handleChange = searchValue => {\r\n    onChange(searchValue);\r\n    setOptions([]);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      allowClear\r\n      showSearch\r\n      value={value}\r\n      onChange={handleChange}\r\n      onSearch={fetchUserBefore}\r\n      notFoundContent={fetching ? <Spin size=\"small\" /> : <span>not found</span>}\r\n      filterOption={false} // 禁用本地搜索\r\n      placeholder=\"创建者\"\r\n      style={{ width: 200, ...style }}\r\n    >\r\n      {options.map(option => (\r\n        <Select.Option key={option.value} value={option.value}>\r\n          {option.text}\r\n        </Select.Option>\r\n      ))}\r\n    </Select>\r\n  );\r\n}\r\n\r\nexport default SearchUser;\r\n"]},"metadata":{},"sourceType":"module"}