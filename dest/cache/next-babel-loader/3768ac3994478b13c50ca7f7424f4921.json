{"ast":null,"code":"/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\nimport React from 'react';\nimport initializeStore from '../redux/store';\nconst isServer = true;\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端执行时都重新创建一个store\n    return initializeStore(initialState);\n  }\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n} // const withRedux = Comp => {\n//   function withReduxApp(props) {\n//     const { Component, pageProps, initialReduxState, ...rest } = props;\n//     return (\n//       <Comp\n//         Component={Component}\n//         pageProps={pageProps}\n//         reduxStore={getOrCreateStore(initialReduxState)}\n//         {...rest}\n//       />\n//     );\n//   }\n//   withReduxApp.getInitialProps = async context => {\n//     let reduxStore;\n//     // 只有在服务端的时候，req才存在\n//     if (isServer) {\n//       const req = context.ctx.req;\n//       const { session } = req;\n//       if (session && session.userInfo) {\n//         reduxStore = getOrCreateStore({\n//           user: session.userInfo,\n//         });\n//       } else {\n//         reduxStore = getOrCreateStore();\n//       }\n//     } else {\n//       reduxStore = getOrCreateStore();\n//     }\n//     context.reduxStore = reduxStore;\n//     let appProps = {};\n//     if (typeof Comp.getInitialProps === 'function') {\n//       appProps = await Comp.getInitialProps(context);\n//     }\n//     return {\n//       ...appProps,\n//       initialReduxState: reduxStore.getState(),\n//     };\n//   };\n//   return withReduxApp;\n// };\n// export default withRedux;","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/with-redux-app.js"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAAqD;;AAErD,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC,MAAIH,QAAJ,EAAc;AACZ;AACA,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACD;;AACD,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AACjCG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACD;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\r\nimport React from 'react';\r\nimport initializeStore from '../redux/store';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\r\n\r\nfunction getOrCreateStore(initialState) {\r\n  if (isServer) {\r\n    // 服务端执行时都重新创建一个store\r\n    return initializeStore(initialState);\r\n  }\r\n  if (!window[__NEXT_REDUX_STORE__]) {\r\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n  }\r\n  return window[__NEXT_REDUX_STORE__];\r\n}\r\n\r\n// const withRedux = Comp => {\r\n//   function withReduxApp(props) {\r\n//     const { Component, pageProps, initialReduxState, ...rest } = props;\r\n//     return (\r\n//       <Comp\r\n//         Component={Component}\r\n//         pageProps={pageProps}\r\n//         reduxStore={getOrCreateStore(initialReduxState)}\r\n//         {...rest}\r\n//       />\r\n//     );\r\n//   }\r\n//   withReduxApp.getInitialProps = async context => {\r\n//     let reduxStore;\r\n//     // 只有在服务端的时候，req才存在\r\n//     if (isServer) {\r\n//       const req = context.ctx.req;\r\n//       const { session } = req;\r\n//       if (session && session.userInfo) {\r\n//         reduxStore = getOrCreateStore({\r\n//           user: session.userInfo,\r\n//         });\r\n//       } else {\r\n//         reduxStore = getOrCreateStore();\r\n//       }\r\n//     } else {\r\n//       reduxStore = getOrCreateStore();\r\n//     }\r\n\r\n//     context.reduxStore = reduxStore;\r\n\r\n//     let appProps = {};\r\n\r\n//     if (typeof Comp.getInitialProps === 'function') {\r\n//       appProps = await Comp.getInitialProps(context);\r\n//     }\r\n\r\n//     return {\r\n//       ...appProps,\r\n//       initialReduxState: reduxStore.getState(),\r\n//     };\r\n//   };\r\n//   return withReduxApp;\r\n// };\r\n\r\n// export default withRedux;\r\n"]},"metadata":{},"sourceType":"module"}