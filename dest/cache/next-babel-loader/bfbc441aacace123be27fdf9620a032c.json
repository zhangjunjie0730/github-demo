{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\search.jsx\",\n    _this = this;\n\nimport { withRouter } from 'next/router';\nimport initCache from '../utils/client-cache';\nimport { request } from '../utils/api';\n/**\r\n * search条件：\r\n * sort: 排序方式\r\n * order: 排序升降顺序\r\n * lang: 仓库开发主语言\r\n * page: 分页\r\n */\n// const { cache, useCache } = initCache({\n//   genCacheKeyStrate: context => genCacheKeyStrate(context.ctx.query),\n// });\n\nvar Search = function Search(_ref) {\n  var router = _ref.router,\n      repos = _ref.repos;\n  console.log('search', repos);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: router.query.query\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_c = Search;\n\nSearch.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, _ctx$query, query, sort, lang, _ctx$query$order, order, page, queryString, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx;\n            _ctx$query = ctx.query, query = _ctx$query.query, sort = _ctx$query.sort, lang = _ctx$query.lang, _ctx$query$order = _ctx$query.order, order = _ctx$query$order === void 0 ? 'desc' : _ctx$query$order, page = _ctx$query.page;\n\n            if (query) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              repos: {\n                total_count: 0\n              }\n            });\n\n          case 4:\n            queryString = \"?q=\".concat(query);\n            lang && (queryString += \"+language:\".concat(lang));\n            sort && (queryString += \"&sort=\".concat(sort, \"&order=\").concat(order));\n            page && (queryString += \"&page=\".concat(page));\n            _context.next = 10;\n            return request({\n              url: \"/search/repositories\".concat(queryString)\n            }, ctx.req, ctx.res);\n\n          case 10:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              repos: result.data\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(Search);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Search\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/search.jsx"],"names":["withRouter","initCache","request","Search","router","repos","console","log","query","getInitialProps","ctx","sort","lang","order","page","total_count","queryString","url","req","res","result","data"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAuB;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACA,sBACE;AAAA,2BACE;AAAA,gBAAOD,MAAM,CAACI,KAAP,CAAaA;AAApB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAPD;;KAAML,M;;AASNA,MAAM,CAACM,eAAP;AAAA,uEAAyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,SAASA,GAAT;AAAA,yBAC6BA,GAAG,CAACF,KADjC,EACfA,KADe,cACfA,KADe,EACRG,IADQ,cACRA,IADQ,EACFC,IADE,cACFA,IADE,gCACIC,KADJ,EACIA,KADJ,iCACY,MADZ,qBACoBC,IADpB,cACoBA,IADpB;;AAAA,gBAElBN,KAFkB;AAAA;AAAA;AAAA;;AAAA,6CAEJ;AAAEH,cAAAA,KAAK,EAAE;AAAEU,gBAAAA,WAAW,EAAE;AAAf;AAAT,aAFI;;AAAA;AAInBC,YAAAA,WAJmB,gBAICR,KAJD;AAKvBI,YAAAA,IAAI,KAAKI,WAAW,wBAAiBJ,IAAjB,CAAhB,CAAJ;AACAD,YAAAA,IAAI,KAAKK,WAAW,oBAAaL,IAAb,oBAA2BE,KAA3B,CAAhB,CAAJ;AACAC,YAAAA,IAAI,KAAKE,WAAW,oBAAaF,IAAb,CAAhB,CAAJ;AAPuB;AAAA,mBASFZ,OAAO,CAC1B;AACEe,cAAAA,GAAG,gCAAyBD,WAAzB;AADL,aAD0B,EAI1BN,GAAG,CAACQ,GAJsB,EAK1BR,GAAG,CAACS,GALsB,CATL;;AAAA;AASjBC,YAAAA,MATiB;AAAA,6CAgBhB;AACLf,cAAAA,KAAK,EAAEe,MAAM,CAACC;AADT,aAhBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAqBA,qBAAerB,UAAU,CAACG,MAAD,CAAzB","sourcesContent":["import { withRouter } from 'next/router';\r\nimport initCache from '../utils/client-cache';\r\nimport { request } from '../utils/api';\r\n\r\n/**\r\n * search条件：\r\n * sort: 排序方式\r\n * order: 排序升降顺序\r\n * lang: 仓库开发主语言\r\n * page: 分页\r\n */\r\n\r\n// const { cache, useCache } = initCache({\r\n//   genCacheKeyStrate: context => genCacheKeyStrate(context.ctx.query),\r\n// });\r\n\r\nconst Search = ({ router, repos }) => {\r\n  console.log('search', repos);\r\n  return (\r\n    <>\r\n      <span>{router.query.query}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nSearch.getInitialProps = async ({ ctx }) => {\r\n  const { query, sort, lang, order = 'desc', page } = ctx.query;\r\n  if (!query) return { repos: { total_count: 0 } };\r\n\r\n  let queryString = `?q=${query}`;\r\n  lang && (queryString += `+language:${lang}`);\r\n  sort && (queryString += `&sort=${sort}&order=${order}`);\r\n  page && (queryString += `&page=${page}`);\r\n\r\n  const result = await request(\r\n    {\r\n      url: `/search/repositories${queryString}`,\r\n    },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n  return {\r\n    repos: result.data,\r\n  };\r\n};\r\n\r\nexport default withRouter(Search);\r\n"]},"metadata":{},"sourceType":"module"}