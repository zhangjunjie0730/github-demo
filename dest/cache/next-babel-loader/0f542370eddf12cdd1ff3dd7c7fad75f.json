{"ast":null,"code":"import _defineProperty from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from 'react';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { userReducer, userInitialState } from './reducers';\nvar isServer = false;\nvar rootReducers = combineReducers({\n  user: userReducer\n});\n/**\r\n * 为什么要导出一个初始化store的方法呢？\r\n * 服务器启动后，所有js都现加载，认为他们是一个模块，这个模块再服务器启动后就已经设定好了。\r\n * 如果不重启服务器，每一次服务端渲染都会使用同一个store对象，这就导致我们的状态改变时不会进行重置\r\n * 如果按照以前的方式export，store会被共用。\r\n * 解决办法：每次渲染时都创建新的store，所以就把with-redux-app这个高阶组件加到根_App中。\r\n */\n\nexport default function initializeStore(state) {\n  var store = createStore(rootReducers, _objectSpread(_objectSpread({}, userInitialState), state), composeWithDevTools(applyMiddleware(thunk)));\n  return store;\n}","map":{"version":3,"sources":["E:/MyGit/github-demo/redux/store.js"],"names":["useMemo","createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","userReducer","userInitialState","isServer","rootReducers","user","initializeStore","state","store"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,YAA9C;AAEA,IAAMC,QAAQ,QAAd;AAEA,IAAMC,YAAY,GAAGP,eAAe,CAAC;AAAEQ,EAAAA,IAAI,EAAEJ;AAAR,CAAD,CAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASK,eAAT,CAAyBC,KAAzB,EAAgC;AAC7C,MAAMC,KAAK,GAAGZ,WAAW,CACvBQ,YADuB,kCAElBF,gBAFkB,GAEGK,KAFH,GAGvBP,mBAAmB,CAACF,eAAe,CAACC,KAAD,CAAhB,CAHI,CAAzB;AAKA,SAAOS,KAAP;AACD","sourcesContent":["import { useMemo } from 'react';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { userReducer, userInitialState } from './reducers';\r\n\r\nconst isServer = typeof window === 'undefined';\r\n\r\nconst rootReducers = combineReducers({ user: userReducer });\r\n\r\n/**\r\n * 为什么要导出一个初始化store的方法呢？\r\n * 服务器启动后，所有js都现加载，认为他们是一个模块，这个模块再服务器启动后就已经设定好了。\r\n * 如果不重启服务器，每一次服务端渲染都会使用同一个store对象，这就导致我们的状态改变时不会进行重置\r\n * 如果按照以前的方式export，store会被共用。\r\n * 解决办法：每次渲染时都创建新的store，所以就把with-redux-app这个高阶组件加到根_App中。\r\n */\r\n\r\nexport default function initializeStore(state) {\r\n  const store = createStore(\r\n    rootReducers,\r\n    { ...userInitialState, ...state },\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n  );\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}