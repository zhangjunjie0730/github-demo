{"ast":null,"code":"import _regeneratorRuntime from \"E:/MyGit/github-demo/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\nimport React from 'react';\nimport initializeStore from '../redux/store';\nvar isServer = false;\nvar __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端执行时都重新创建一个store\n    return initializeStore(initialState);\n  }\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nvar withRedux = function withRedux(Comp) {\n  // function withReduxApp(props) {\n  //   const { Component, pageProps, initialReduxState, ...rest } = props;\n  //   return (\n  //     <Comp\n  //       Component={Component}\n  //       pageProps={pageProps}\n  //       reduxStore={getOrCreateStore(initialReduxState)}\n  //       {...rest}\n  //     />\n  //   );\n  // }\n  var withReduxApp = /*#__PURE__*/function (_React$Component) {\n    _inherits(withReduxApp, _React$Component);\n\n    var _super = _createSuper(withReduxApp);\n\n    function withReduxApp(props) {\n      var _this;\n\n      _classCallCheck(this, withReduxApp);\n\n      _this = _super.call(this, props);\n      _this.reduxStore = getOrCreateStore(props.initialReduxState);\n      return _this;\n    }\n\n    return withReduxApp;\n  }(React.Component);\n\n  withReduxApp.getInitialProps = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n      var reduxStore, req, session, appProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // 只有在服务端的时候，req才存在\n              if (isServer) {\n                req = ctx.ctx.req;\n                session = req.session;\n\n                if (session && session.userInfo) {\n                  reduxStore = getOrCreateStore({\n                    user: session.userInfo\n                  });\n                } else {\n                  reduxStore = getOrCreateStore();\n                }\n              } else {\n                reduxStore = getOrCreateStore();\n              }\n\n              ctx.reduxStore = reduxStore;\n              appProps = {};\n\n              if (!(typeof Comp.getInitialProps === 'function')) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return Comp.getInitialProps(ctx);\n\n            case 6:\n              appProps = _context.sent;\n\n            case 7:\n              return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, appProps), {}, {\n                initialReduxState: reduxStore.getState()\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withReduxApp;\n};\n\nexport default withRedux;","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/with-redux-app.js"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","withRedux","Comp","withReduxApp","props","reduxStore","initialReduxState","Component","getInitialProps","ctx","req","session","userInfo","user","appProps","getState"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA,IAAMC,QAAQ,QAAd;AACA,IAAMC,oBAAoB,GAAG,sBAA7B,C,CAAqD;;AAErD,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC,MAAIH,QAAJ,EAAc;AACZ;AACA,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACD;;AACD,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AACjCG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACD;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACD;;AAED,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI,EAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXwB,MAYlBC,YAZkB;AAAA;;AAAA;;AAatB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gCAAMA,KAAN;AACA,YAAKC,UAAL,GAAkBP,gBAAgB,CAACM,KAAK,CAACE,iBAAP,CAAlC;AAFiB;AAGlB;;AAhBqB;AAAA,IAYGZ,KAAK,CAACa,SAZT;;AAkBxBJ,EAAAA,YAAY,CAACK,eAAb;AAAA,wEAA+B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7B;AACA,kBAAIb,QAAJ,EAAc;AAEHc,gBAAAA,GAFG,GAGRD,GAHQ,CAEVA,GAFU,CAEHC,GAFG;AAIJC,gBAAAA,OAJI,GAIQD,GAJR,CAIJC,OAJI;;AAKZ,oBAAIA,OAAO,IAAIA,OAAO,CAACC,QAAvB,EAAiC;AAC/BP,kBAAAA,UAAU,GAAGP,gBAAgB,CAAC;AAC5Be,oBAAAA,IAAI,EAAEF,OAAO,CAACC;AADc,mBAAD,CAA7B;AAGD,iBAJD,MAIO;AACLP,kBAAAA,UAAU,GAAGP,gBAAgB,EAA7B;AACD;AACF,eAZD,MAYO;AACLO,gBAAAA,UAAU,GAAGP,gBAAgB,EAA7B;AACD;;AAEDW,cAAAA,GAAG,CAACJ,UAAJ,GAAiBA,UAAjB;AAEIS,cAAAA,QArByB,GAqBd,EArBc;;AAAA,oBAsBzB,OAAOZ,IAAI,CAACM,eAAZ,KAAgC,UAtBP;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAuBVN,IAAI,CAACM,eAAL,CAAqBC,GAArB,CAvBU;;AAAA;AAuB3BK,cAAAA,QAvB2B;;AAAA;AAAA,+EA2BxBA,QA3BwB;AA4B3BR,gBAAAA,iBAAiB,EAAED,UAAU,CAACU,QAAX;AA5BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA;;AA+BA,SAAOZ,YAAP;AACD,CAlDD;;AAoDA,eAAeF,SAAf","sourcesContent":["/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\r\nimport React from 'react';\r\nimport initializeStore from '../redux/store';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\r\n\r\nfunction getOrCreateStore(initialState) {\r\n  if (isServer) {\r\n    // 服务端执行时都重新创建一个store\r\n    return initializeStore(initialState);\r\n  }\r\n  if (!window[__NEXT_REDUX_STORE__]) {\r\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n  }\r\n  return window[__NEXT_REDUX_STORE__];\r\n}\r\n\r\nconst withRedux = Comp => {\r\n  // function withReduxApp(props) {\r\n  //   const { Component, pageProps, initialReduxState, ...rest } = props;\r\n  //   return (\r\n  //     <Comp\r\n  //       Component={Component}\r\n  //       pageProps={pageProps}\r\n  //       reduxStore={getOrCreateStore(initialReduxState)}\r\n  //       {...rest}\r\n  //     />\r\n  //   );\r\n  // }\r\n  class withReduxApp extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\r\n    }\r\n  }\r\n  withReduxApp.getInitialProps = async ctx => {\r\n    let reduxStore;\r\n    // 只有在服务端的时候，req才存在\r\n    if (isServer) {\r\n      const {\r\n        ctx: { req },\r\n      } = ctx;\r\n      const { session } = req;\r\n      if (session && session.userInfo) {\r\n        reduxStore = getOrCreateStore({\r\n          user: session.userInfo,\r\n        });\r\n      } else {\r\n        reduxStore = getOrCreateStore();\r\n      }\r\n    } else {\r\n      reduxStore = getOrCreateStore();\r\n    }\r\n\r\n    ctx.reduxStore = reduxStore;\r\n\r\n    let appProps = {};\r\n    if (typeof Comp.getInitialProps === 'function') {\r\n      appProps = await Comp.getInitialProps(ctx);\r\n    }\r\n\r\n    return {\r\n      ...appProps,\r\n      initialReduxState: reduxStore.getState(),\r\n    };\r\n  };\r\n  return withReduxApp;\r\n};\r\n\r\nexport default withRedux;\r\n"]},"metadata":{},"sourceType":"module"}