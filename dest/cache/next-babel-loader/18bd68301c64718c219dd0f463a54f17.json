{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\detail\\\\issues.jsx\";\nimport { useRouter } from 'next/router';\nimport { genDetailCacheKey, genDetailCacheKeyStrate } from '../../utils';\nimport { request } from '../../utils/api';\nimport initClientCache from '../../utils/client-cache';\nconst {\n  cache,\n  useCache\n} = initClientCache({\n  genCacheKeyStrate: context => genDetailCacheKeyStrate(context)\n});\n\nconst Issues = ({\n  services\n}) => {\n  const router = useRouter();\n  useCache(genDetailCacheKey(router, {\n    services\n  }));\n  const {\n    issues,\n    labels\n  } = services;\n  const [creator, setCreator] = useState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"root\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\nIssues.getInitialProps = cache(async ({\n  ctx\n}) => {\n  const {\n    owner,\n    name\n  } = ctx.query;\n  const [{\n    data: issues\n  }, {\n    data: labels\n  }] = await Promise.all([request({\n    url: `/repos/${owner}/${name}/issues`\n  }, ctx.req, ctx.res), request({\n    url: `/repos/${owner}/${name}/labels`\n  }, ctx.req, ctx.res)]);\n  return {\n    services: {\n      issues,\n      labels\n    }\n  };\n});\nexport default Issues;","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/detail/issues.jsx"],"names":["useRouter","genDetailCacheKey","genDetailCacheKeyStrate","request","initClientCache","cache","useCache","genCacheKeyStrate","context","Issues","services","router","issues","labels","creator","setCreator","useState","getInitialProps","ctx","owner","name","query","data","Promise","all","url","req","res"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,aAA3D;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AAEA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAsBF,eAAe,CAAC;AAC1CG,EAAAA,iBAAiB,EAAEC,OAAO,IAAIN,uBAAuB,CAACM,OAAD;AADX,CAAD,CAA3C;;AAIA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/B,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACAM,EAAAA,QAAQ,CAACL,iBAAiB,CAACU,MAAD,EAAS;AAAED,IAAAA;AAAF,GAAT,CAAlB,CAAR;AAEA,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBH,QAA3B;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,EAAtC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAbD;;AAeAP,MAAM,CAACQ,eAAP,GAAyBZ,KAAK,CAAC,OAAO;AAAEa,EAAAA;AAAF,CAAP,KAAmB;AAChD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBF,GAAG,CAACG,KAA5B;AACA,QAAM,CAAC;AAAEC,IAAAA,IAAI,EAAEV;AAAR,GAAD,EAAmB;AAAEU,IAAAA,IAAI,EAAET;AAAR,GAAnB,IAAuC,MAAMU,OAAO,CAACC,GAAR,CAAY,CAC7DrB,OAAO,CAAC;AAAEsB,IAAAA,GAAG,EAAG,UAASN,KAAM,IAAGC,IAAK;AAA/B,GAAD,EAA4CF,GAAG,CAACQ,GAAhD,EAAqDR,GAAG,CAACS,GAAzD,CADsD,EAE7DxB,OAAO,CAAC;AAAEsB,IAAAA,GAAG,EAAG,UAASN,KAAM,IAAGC,IAAK;AAA/B,GAAD,EAA4CF,GAAG,CAACQ,GAAhD,EAAqDR,GAAG,CAACS,GAAzD,CAFsD,CAAZ,CAAnD;AAKA,SAAO;AACLjB,IAAAA,QAAQ,EAAE;AACRE,MAAAA,MADQ;AAERC,MAAAA;AAFQ;AADL,GAAP;AAMD,CAb6B,CAA9B;AAeA,eAAeJ,MAAf","sourcesContent":["import { useRouter } from 'next/router';\r\nimport { genDetailCacheKey, genDetailCacheKeyStrate } from '../../utils';\r\nimport { request } from '../../utils/api';\r\nimport initClientCache from '../../utils/client-cache';\r\n\r\nconst { cache, useCache } = initClientCache({\r\n  genCacheKeyStrate: context => genDetailCacheKeyStrate(context),\r\n});\r\n\r\nconst Issues = ({ services }) => {\r\n  const router = useRouter();\r\n  useCache(genDetailCacheKey(router, { services }));\r\n\r\n  const { issues, labels } = services;\r\n\r\n  const [creator, setCreator] = useState();\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <div className=\"search\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nIssues.getInitialProps = cache(async ({ ctx }) => {\r\n  const { owner, name } = ctx.query;\r\n  const [{ data: issues }, { data: labels }] = await Promise.all([\r\n    request({ url: `/repos/${owner}/${name}/issues` }, ctx.req, ctx.res),\r\n    request({ url: `/repos/${owner}/${name}/labels` }, ctx.req, ctx.res),\r\n  ]);\r\n\r\n  return {\r\n    services: {\r\n      issues,\r\n      labels,\r\n    },\r\n  };\r\n});\r\n\r\nexport default Issues;\r\n"]},"metadata":{},"sourceType":"module"}