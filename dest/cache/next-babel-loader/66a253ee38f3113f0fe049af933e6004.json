{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport 'antd/dist/antd.css';\nimport { useEffect, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport Router from 'next/router';\nimport Layout from '../components/Layout';\nimport withRedux from '../utils/with-redux-app';\nimport PageLoading from '../components/PageLoading'; // Component对应pages的每个页面\n\nfunction MyApp(props) {\n  const {\n    Component,\n    pageProps\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    Router.events.on('routeChangeError', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n      Router.events.off('routeChangeError', stopLoading);\n    };\n  });\n  console.log('_app.props', props);\n  return (\n    /*#__PURE__*/\n    // <Provider store={reduxStore}>\n    _jsxDEV(Layout, {\n      children: [loading && /*#__PURE__*/_jsxDEV(PageLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this) // </Provider>\n\n  );\n} // MyApp.getInitialProps = async appContext => {\n//   const appProps = await App.getInitialProps(appContext);\n//   return { ...appProps };\n// const { Component } = context;\n// let pageProps = {};\n// if (Component.getInitialProps) {\n//   pageProps = await Component.getInitialProps(context);\n// }\n// return { pageProps };\n// };\n\n\nexport default withRedux(MyApp); // only uncomment this method if you have blocking data requirements for every single page in your application. This disables the ability to perform automatic static optimization, causing every page in your app to be server-side rendered.","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/_app.js"],"names":["useEffect","useState","Provider","Router","Layout","withRedux","PageLoading","MyApp","props","Component","pageProps","loading","setLoading","startLoading","stopLoading","events","on","off","console","log"],"mappings":";;;;;;;;;AAAA,OAAO,oBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CAEA;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA2BF,KAAjC;AAEA,QAAM;AAAA,OAACG,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMY,YAAY,GAAG,MAAMD,UAAU,CAAC,IAAD,CAArC;;AACA,QAAME,WAAW,GAAG,MAAMF,UAAU,CAAC,KAAD,CAApC;;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,CAACY,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCH,YAArC;AACAV,IAAAA,MAAM,CAACY,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCF,WAAxC;AACAX,IAAAA,MAAM,CAACY,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCF,WAArC;AACA,WAAO,MAAM;AACXX,MAAAA,MAAM,CAACY,MAAP,CAAcE,GAAd,CAAkB,kBAAlB,EAAsCJ,YAAtC;AACAV,MAAAA,MAAM,CAACY,MAAP,CAAcE,GAAd,CAAkB,qBAAlB,EAAyCH,WAAzC;AACAX,MAAAA,MAAM,CAACY,MAAP,CAAcE,GAAd,CAAkB,kBAAlB,EAAsCH,WAAtC;AACD,KAJD;AAKD,GATQ,CAAT;AAUAI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BX,KAA1B;AACA;AAAA;AACE;AACA,YAAC,MAAD;AAAA,iBACGG,OAAO,iBAAI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADd,eAEE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CAME;;AANF;AAQD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeL,SAAS,CAACE,KAAD,CAAxB,C,CACA","sourcesContent":["import 'antd/dist/antd.css';\nimport { useEffect, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport Router from 'next/router';\n\nimport Layout from '../components/Layout';\nimport withRedux from '../utils/with-redux-app';\nimport PageLoading from '../components/PageLoading';\n\n// Component对应pages的每个页面\nfunction MyApp(props) {\n  const { Component, pageProps } = props;\n\n  const [loading, setLoading] = useState(false);\n\n  const startLoading = () => setLoading(true);\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    Router.events.on('routeChangeError', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n      Router.events.off('routeChangeError', stopLoading);\n    };\n  });\n  console.log('_app.props', props);\n  return (\n    // <Provider store={reduxStore}>\n    <Layout>\n      {loading && <PageLoading />}\n      <Component {...pageProps} />\n    </Layout>\n    // </Provider>\n  );\n}\n\n// MyApp.getInitialProps = async appContext => {\n//   const appProps = await App.getInitialProps(appContext);\n//   return { ...appProps };\n\n// const { Component } = context;\n// let pageProps = {};\n// if (Component.getInitialProps) {\n//   pageProps = await Component.getInitialProps(context);\n// }\n// return { pageProps };\n// };\n\nexport default withRedux(MyApp);\n// only uncomment this method if you have blocking data requirements for every single page in your application. This disables the ability to perform automatic static optimization, causing every page in your app to be server-side rendered.\n"]},"metadata":{},"sourceType":"module"}