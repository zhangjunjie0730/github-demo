{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\utils\\\\with-redux-app.js\";\n\n/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\nimport React from 'react';\nimport App from 'next/app';\nimport initializeStore from '../redux/store';\nconst isServer = typeof window === 'undefined';\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端执行时都重新创建一个store\n    return initializeStore(initialState);\n  }\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n} // const withRedux = Comp => {\n//   function withReduxApp(props) {\n//     const { Component, pageProps, initialReduxState, ...rest } = props;\n//     return (\n//       <Comp\n//         Component={Component}\n//         pageProps={pageProps}\n//         reduxStore={getOrCreateStore(initialReduxState)}\n//         {...rest}\n//       />\n//     );\n//   }\n//   withReduxApp.getInitialProps = async context => {\n//     let reduxStore;\n//     // 只有在服务端的时候，req才存在\n//     if (isServer) {\n//       const req = context.ctx.req;\n//       const { session } = req;\n//       if (session && session.userInfo) {\n//         reduxStore = getOrCreateStore({\n//           user: session.userInfo,\n//         });\n//       } else {\n//         reduxStore = getOrCreateStore();\n//       }\n//     } else {\n//       reduxStore = getOrCreateStore();\n//     }\n//     context.reduxStore = reduxStore;\n//     // let appProps = {};\n//     // if (typeof Comp.getInitialProps === 'function') {\n//     //   appProps = await Comp.getInitialProps(context);\n//     // }\n//     const appProps = await App.getInitialProps(context);\n//     return {\n//       ...appProps,\n//       initialReduxState: reduxStore.getState(),\n//     };\n//   };\n//   return withReduxApp;\n// };\n// export default withRedux;\n\n\nexport default (Comp => {\n  class withReduxApp extends React.Component {\n    constructor(props) {\n      super(props); // getInitialProps创建了store 这里为什么又重新创建一次？\n      // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\n      // redux里有很多方法 不适合序列化存储\n      // 所以选择在getInitialProps返回initialReduxState初始的状态\n      // 再在这里通过initialReduxState去创建一个完整的store\n\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\n    }\n\n    render() {\n      const _this$props = this.props,\n            {\n        Component,\n        pageProps\n      } = _this$props,\n            rest = _objectWithoutProperties(_this$props, [\"Component\", \"pageProps\"]);\n\n      return /*#__PURE__*/React.createElement(Comp, _extends({}, rest, {\n        Component: Component,\n        pageProps: pageProps,\n        reduxStore: this.reduxStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }));\n    }\n\n  } // 这个其实是_app.js的getInitialProps\n  // 在服务端渲染和客户端路由跳转时会被执行\n  // 所以非常适合做redux-store的初始化\n\n\n  withReduxApp.getInitialProps = async ctx => {\n    let reduxStore;\n\n    if (isServer) {\n      const {\n        ctx: {\n          req\n        }\n      } = ctx;\n      const {\n        session\n      } = req;\n\n      if (session && session.userInfo) {\n        reduxStore = getOrCreateStore({\n          user: session.userInfo\n        });\n      } else {\n        reduxStore = getOrCreateStore();\n      }\n    } else {\n      reduxStore = getOrCreateStore();\n    }\n\n    ctx.reduxStore = reduxStore;\n    let appProps = {};\n\n    if (typeof Comp.getInitialProps === 'function') {\n      appProps = await Comp.getInitialProps(ctx);\n    }\n\n    return _objectSpread({}, appProps, {\n      initialReduxState: reduxStore.getState()\n    });\n  };\n\n  return withReduxApp;\n});","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/with-redux-app.js"],"names":["React","App","initializeStore","isServer","window","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","Comp","withReduxApp","Component","constructor","props","reduxStore","initialReduxState","render","pageProps","rest","getInitialProps","ctx","req","session","userInfo","user","appProps","getState"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA,MAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAnC;AACA,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAAqD;;AAErD,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC,MAAIJ,QAAJ,EAAc;AACZ;AACA,WAAOD,eAAe,CAACK,YAAD,CAAtB;AACD;;AACD,MAAI,CAACH,MAAM,CAACC,oBAAD,CAAX,EAAmC;AACjCD,IAAAA,MAAM,CAACC,oBAAD,CAAN,GAA+BH,eAAe,CAACK,YAAD,CAA9C;AACD;;AACD,SAAOH,MAAM,CAACC,oBAAD,CAAb;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,gBAAeG,IAAI,IAAI;AACrB,QAAMC,YAAN,SAA2BT,KAAK,CAACU,SAAjC,CAA2C;AACzCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN,EADiB,CAEjB;AACA;AACA;AACA;AACA;;AACA,WAAKC,UAAL,GAAkBP,gBAAgB,CAACM,KAAK,CAACE,iBAAP,CAAlC;AACD;;AAEDC,IAAAA,MAAM,GAAG;AACP,0BAA0C,KAAKH,KAA/C;AAAA,YAAM;AAAEF,QAAAA,SAAF;AAAaM,QAAAA;AAAb,OAAN;AAAA,YAAiCC,IAAjC;;AACA,0BACE,oBAAC,IAAD,eAAUA,IAAV;AAAgB,QAAA,SAAS,EAAEP,SAA3B;AAAsC,QAAA,SAAS,EAAEM,SAAjD;AAA4D,QAAA,UAAU,EAAE,KAAKH,UAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;AAhBwC,GADtB,CAoBrB;AACA;AACA;;;AACAJ,EAAAA,YAAY,CAACS,eAAb,GAA+B,MAAMC,GAAN,IAAa;AAC1C,QAAIN,UAAJ;;AAEA,QAAIV,QAAJ,EAAc;AACZ,YAAM;AACJgB,QAAAA,GAAG,EAAE;AAAEC,UAAAA;AAAF;AADD,UAEFD,GAFJ;AAGA,YAAM;AAAEE,QAAAA;AAAF,UAAcD,GAApB;;AACA,UAAIC,OAAO,IAAIA,OAAO,CAACC,QAAvB,EAAiC;AAC/BT,QAAAA,UAAU,GAAGP,gBAAgB,CAAC;AAC5BiB,UAAAA,IAAI,EAAEF,OAAO,CAACC;AADc,SAAD,CAA7B;AAGD,OAJD,MAIO;AACLT,QAAAA,UAAU,GAAGP,gBAAgB,EAA7B;AACD;AACF,KAZD,MAYO;AACLO,MAAAA,UAAU,GAAGP,gBAAgB,EAA7B;AACD;;AAEDa,IAAAA,GAAG,CAACN,UAAJ,GAAiBA,UAAjB;AAEA,QAAIW,QAAQ,GAAG,EAAf;;AACA,QAAI,OAAOhB,IAAI,CAACU,eAAZ,KAAgC,UAApC,EAAgD;AAC9CM,MAAAA,QAAQ,GAAG,MAAMhB,IAAI,CAACU,eAAL,CAAqBC,GAArB,CAAjB;AACD;;AAED,6BACKK,QADL;AAEEV,MAAAA,iBAAiB,EAAED,UAAU,CAACY,QAAX;AAFrB;AAID,GA9BD;;AAgCA,SAAOhB,YAAP;AACD,CAxDD","sourcesContent":["/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\r\nimport React from 'react';\r\nimport App from 'next/app';\r\nimport initializeStore from '../redux/store';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\r\n\r\nfunction getOrCreateStore(initialState) {\r\n  if (isServer) {\r\n    // 服务端执行时都重新创建一个store\r\n    return initializeStore(initialState);\r\n  }\r\n  if (!window[__NEXT_REDUX_STORE__]) {\r\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n  }\r\n  return window[__NEXT_REDUX_STORE__];\r\n}\r\n\r\n// const withRedux = Comp => {\r\n//   function withReduxApp(props) {\r\n//     const { Component, pageProps, initialReduxState, ...rest } = props;\r\n//     return (\r\n//       <Comp\r\n//         Component={Component}\r\n//         pageProps={pageProps}\r\n//         reduxStore={getOrCreateStore(initialReduxState)}\r\n//         {...rest}\r\n//       />\r\n//     );\r\n//   }\r\n//   withReduxApp.getInitialProps = async context => {\r\n//     let reduxStore;\r\n//     // 只有在服务端的时候，req才存在\r\n//     if (isServer) {\r\n//       const req = context.ctx.req;\r\n//       const { session } = req;\r\n//       if (session && session.userInfo) {\r\n//         reduxStore = getOrCreateStore({\r\n//           user: session.userInfo,\r\n//         });\r\n//       } else {\r\n//         reduxStore = getOrCreateStore();\r\n//       }\r\n//     } else {\r\n//       reduxStore = getOrCreateStore();\r\n//     }\r\n\r\n//     context.reduxStore = reduxStore;\r\n\r\n//     // let appProps = {};\r\n\r\n//     // if (typeof Comp.getInitialProps === 'function') {\r\n//     //   appProps = await Comp.getInitialProps(context);\r\n//     // }\r\n//     const appProps = await App.getInitialProps(context);\r\n\r\n//     return {\r\n//       ...appProps,\r\n//       initialReduxState: reduxStore.getState(),\r\n//     };\r\n//   };\r\n//   return withReduxApp;\r\n// };\r\n\r\n// export default withRedux;\r\n\r\nexport default Comp => {\r\n  class withReduxApp extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      // getInitialProps创建了store 这里为什么又重新创建一次？\r\n      // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\r\n      // redux里有很多方法 不适合序列化存储\r\n      // 所以选择在getInitialProps返回initialReduxState初始的状态\r\n      // 再在这里通过initialReduxState去创建一个完整的store\r\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\r\n    }\r\n\r\n    render() {\r\n      const { Component, pageProps, ...rest } = this.props;\r\n      return (\r\n        <Comp {...rest} Component={Component} pageProps={pageProps} reduxStore={this.reduxStore} />\r\n      );\r\n    }\r\n  }\r\n\r\n  // 这个其实是_app.js的getInitialProps\r\n  // 在服务端渲染和客户端路由跳转时会被执行\r\n  // 所以非常适合做redux-store的初始化\r\n  withReduxApp.getInitialProps = async ctx => {\r\n    let reduxStore;\r\n\r\n    if (isServer) {\r\n      const {\r\n        ctx: { req },\r\n      } = ctx;\r\n      const { session } = req;\r\n      if (session && session.userInfo) {\r\n        reduxStore = getOrCreateStore({\r\n          user: session.userInfo,\r\n        });\r\n      } else {\r\n        reduxStore = getOrCreateStore();\r\n      }\r\n    } else {\r\n      reduxStore = getOrCreateStore();\r\n    }\r\n\r\n    ctx.reduxStore = reduxStore;\r\n\r\n    let appProps = {};\r\n    if (typeof Comp.getInitialProps === 'function') {\r\n      appProps = await Comp.getInitialProps(ctx);\r\n    }\r\n\r\n    return {\r\n      ...appProps,\r\n      initialReduxState: reduxStore.getState(),\r\n    };\r\n  };\r\n\r\n  return withReduxApp;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}