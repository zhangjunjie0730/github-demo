{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import 'antd/dist/antd.css';\n// import { useEffect, useState } from 'react';\n// import { Provider } from 'react-redux';\n// import Router from 'next/router';\n// import Layout from '../components/Layout';\n// import withRedux from '../utils/with-redux-app';\n// import PageLoading from '../components/PageLoading';\n// // Component对应pages的每个页面\n// function MyApp({ Component, pageProps, reduxStore }) {\n//   const [loading, setLoading] = useState(false);\n//   const startLoading = () => setLoading(true);\n//   const stopLoading = () => setLoading(false);\n//   useEffect(() => {\n//     Router.events.on('routeChangeStart', startLoading);\n//     Router.events.on('routeChangeComplete', stopLoading);\n//     Router.events.on('routeChangeError', stopLoading);\n//     return () => {\n//       Router.events.off('routeChangeStart', startLoading);\n//       Router.events.off('routeChangeComplete', stopLoading);\n//       Router.events.off('routeChangeError', stopLoading);\n//     };\n//   });\n//   return (\n//     <Provider store={reduxStore}>\n//       <Layout>\n//         {loading && <PageLoading />}\n//         <Component {...pageProps} />\n//       </Layout>\n//     </Provider>\n//   );\n// }\n// MyApp.getInitialProps = async context => {\n//   const { Component } = context;\n//   let pageProps = {};\n//   if (Component.getInitialProps) {\n//     pageProps = await Component.getInitialProps(context);\n//   }\n//   return { pageProps };\n// };\n// export default withRedux(MyApp);\nimport App from 'next/app';\nimport 'antd/dist/antd.css';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport Router from 'next/router';\nimport Layout from '../components/Layout';\nimport PageLoading from '../components/PageLoading';\nimport withRedux from '../utils/with-redux-app';\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      context: 'value',\n      loading: false\n    });\n\n    _defineProperty(this, \"startLoading\", () => {\n      this.setState({\n        loading: true\n      });\n    });\n\n    _defineProperty(this, \"stopLoading\", () => {\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  // App组件的getInitialProps比较特殊\n  // 能拿到一些额外的参数\n  // Component: 被包裹的组件\n  static async getInitialProps(ctx) {\n    const {\n      Component\n    } = ctx;\n    let pageProps = {}; // 拿到Component上定义的getInitialProps\n\n    if (typeof Component.getInitialProps === 'function') {\n      // 执行拿到返回结果`\n      pageProps = await Component.getInitialProps(ctx);\n    } // 返回给组件\n\n\n    return {\n      pageProps\n    };\n  }\n\n  componentDidMount() {\n    Router.events.on('routeChangeStart', this.startLoading);\n    Router.events.on('routeChangeComplete', this.stopLoading);\n    Router.events.on('routeChangeError', this.stopLoading);\n  }\n\n  componentWillUnmount() {\n    Router.events.off('routeChangeStart', this.startLoading);\n    Router.events.off('routeChangeComplete', this.stopLoading);\n    Router.events.off('routeChangeError', this.stopLoading);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      reduxStore\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Provider, {\n      store: reduxStore,\n      children: /*#__PURE__*/_jsxDEV(Layout, {\n        children: [this.state.loading && /*#__PURE__*/_jsxDEV(PageLoading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n} // export default withRedux(MyApp);\n\n\nexport default MyApp;","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/_app.js"],"names":["App","React","Provider","Router","Layout","PageLoading","withRedux","MyApp","context","loading","setState","getInitialProps","ctx","Component","pageProps","componentDidMount","events","on","startLoading","stopLoading","componentWillUnmount","off","render","reduxStore","props","state"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAO,oBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,KAAN,SAAoBP,GAApB,CAAwB;AAAA;AAAA;;AAAA,mCAoBd;AACNQ,MAAAA,OAAO,EAAE,OADH;AAENC,MAAAA,OAAO,EAAE;AAFH,KApBc;;AAAA,0CAyBP,MAAM;AACnB,WAAKC,QAAL,CAAc;AACZD,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KA7BqB;;AAAA,yCA+BR,MAAM;AAClB,WAAKC,QAAL,CAAc;AACZD,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAnCqB;AAAA;;AACtB;AACA;AACA;AACA,eAAaE,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,UAAM;AAAEC,MAAAA;AAAF,QAAgBD,GAAtB;AACA,QAAIE,SAAS,GAAG,EAAhB,CAFgC,CAIhC;;AACA,QAAI,OAAOD,SAAS,CAACF,eAAjB,KAAqC,UAAzC,EAAqD;AACnD;AACAG,MAAAA,SAAS,GAAG,MAAMD,SAAS,CAACF,eAAV,CAA0BC,GAA1B,CAAlB;AACD,KAR+B,CAUhC;;;AACA,WAAO;AACLE,MAAAA;AADK,KAAP;AAGD;;AAmBDC,EAAAA,iBAAiB,GAAG;AAClBZ,IAAAA,MAAM,CAACa,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,KAAKC,YAA1C;AACAf,IAAAA,MAAM,CAACa,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC,KAAKE,WAA7C;AACAhB,IAAAA,MAAM,CAACa,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,KAAKE,WAA1C;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBjB,IAAAA,MAAM,CAACa,MAAP,CAAcK,GAAd,CAAkB,kBAAlB,EAAsC,KAAKH,YAA3C;AACAf,IAAAA,MAAM,CAACa,MAAP,CAAcK,GAAd,CAAkB,qBAAlB,EAAyC,KAAKF,WAA9C;AACAhB,IAAAA,MAAM,CAACa,MAAP,CAAcK,GAAd,CAAkB,kBAAlB,EAAsC,KAAKF,WAA3C;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBS,MAAAA;AAAxB,QAAuC,KAAKC,KAAlD;AACA,wBACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAED,UAAjB;AAAA,6BACE,QAAC,MAAD;AAAA,mBACG,KAAKE,KAAL,CAAWhB,OAAX,iBAAsB,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBADzB,eAGE,QAAC,SAAD,oBAAeK,SAAf;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AA5DqB,C,CA+DxB;;;AACA,eAAeP,KAAf","sourcesContent":["// import 'antd/dist/antd.css';\n// import { useEffect, useState } from 'react';\n// import { Provider } from 'react-redux';\n// import Router from 'next/router';\n\n// import Layout from '../components/Layout';\n// import withRedux from '../utils/with-redux-app';\n// import PageLoading from '../components/PageLoading';\n\n// // Component对应pages的每个页面\n// function MyApp({ Component, pageProps, reduxStore }) {\n//   const [loading, setLoading] = useState(false);\n\n//   const startLoading = () => setLoading(true);\n//   const stopLoading = () => setLoading(false);\n\n//   useEffect(() => {\n//     Router.events.on('routeChangeStart', startLoading);\n//     Router.events.on('routeChangeComplete', stopLoading);\n//     Router.events.on('routeChangeError', stopLoading);\n//     return () => {\n//       Router.events.off('routeChangeStart', startLoading);\n//       Router.events.off('routeChangeComplete', stopLoading);\n//       Router.events.off('routeChangeError', stopLoading);\n//     };\n//   });\n\n//   return (\n//     <Provider store={reduxStore}>\n//       <Layout>\n//         {loading && <PageLoading />}\n//         <Component {...pageProps} />\n//       </Layout>\n//     </Provider>\n//   );\n// }\n\n// MyApp.getInitialProps = async context => {\n//   const { Component } = context;\n//   let pageProps = {};\n//   if (Component.getInitialProps) {\n//     pageProps = await Component.getInitialProps(context);\n//   }\n//   return { pageProps };\n// };\n\n// export default withRedux(MyApp);\nimport App from 'next/app';\nimport 'antd/dist/antd.css';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport Router from 'next/router';\nimport Layout from '../components/Layout';\nimport PageLoading from '../components/PageLoading';\nimport withRedux from '../utils/with-redux-app';\n\nclass MyApp extends App {\n  // App组件的getInitialProps比较特殊\n  // 能拿到一些额外的参数\n  // Component: 被包裹的组件\n  static async getInitialProps(ctx) {\n    const { Component } = ctx;\n    let pageProps = {};\n\n    // 拿到Component上定义的getInitialProps\n    if (typeof Component.getInitialProps === 'function') {\n      // 执行拿到返回结果`\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    // 返回给组件\n    return {\n      pageProps,\n    };\n  }\n\n  state = {\n    context: 'value',\n    loading: false,\n  };\n\n  startLoading = () => {\n    this.setState({\n      loading: true,\n    });\n  };\n\n  stopLoading = () => {\n    this.setState({\n      loading: false,\n    });\n  };\n\n  componentDidMount() {\n    Router.events.on('routeChangeStart', this.startLoading);\n    Router.events.on('routeChangeComplete', this.stopLoading);\n    Router.events.on('routeChangeError', this.stopLoading);\n  }\n\n  componentWillUnmount() {\n    Router.events.off('routeChangeStart', this.startLoading);\n    Router.events.off('routeChangeComplete', this.stopLoading);\n    Router.events.off('routeChangeError', this.stopLoading);\n  }\n\n  render() {\n    const { Component, pageProps, reduxStore } = this.props;\n    return (\n      <Provider store={reduxStore}>\n        <Layout>\n          {this.state.loading && <PageLoading />}\n          {/* 把pageProps解构后传递给组件 */}\n          <Component {...pageProps} />\n        </Layout>\n      </Provider>\n    );\n  }\n}\n\n// export default withRedux(MyApp);\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}