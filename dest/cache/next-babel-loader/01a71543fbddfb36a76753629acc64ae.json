{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\index.jsx\";\n\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport getConfig from 'next/config';\nimport { useRouter } from 'next/router';\nimport { request } from '../utils/api';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar Index = function Index(_ref) {\n  var ctx = _ref.ctx;\n  console.log('index.ctx', ctx);\n  var router = useRouter();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"index\"));\n};\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, reduxStore;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx, reduxStore = _ref2.reduxStore;\n            return _context.abrupt(\"return\", ctx);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // Index.getInitialProps = async context => {\n//   console.log('index页面的context', context);\n//   // const result = await api.request({ url: `/user/repos` }, ctx.req, ctx.res);\n//   // return {\n//   //   userRepos: result.data,\n//   //   ctx,\n//   // };\n//   return context;\n// };\n\n\nexport default connect(function (state) {\n  return {\n    user: state.user\n  };\n})(Index);","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/index.jsx"],"names":["connect","getConfig","useRouter","request","publicRuntimeConfig","Index","ctx","console","log","router","getInitialProps","reduxStore","state","user"],"mappings":";;;;;;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,cAAxB;;iBAEgCF,SAAS,E;IAAjCG,mB,cAAAA,mB;;AAER,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,GAAzB;AACA,MAAMG,MAAM,GAAGP,SAAS,EAAxB;AACA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF;AAKD,CARD;;AASAG,KAAK,CAACK,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASJ,YAAAA,GAAT,SAASA,GAAT,EAAcK,UAAd,SAAcA,UAAd;AAAA,6CAuBfL,GAvBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,I,CAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeN,OAAO,CAAC,UAAAY,KAAK;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAED,KAAK,CAACC;AAAd,GAAL;AAAA,CAAN,CAAP,CAAyCR,KAAzC,CAAf","sourcesContent":["import { connect } from 'react-redux';\r\nimport getConfig from 'next/config';\r\nimport { useRouter } from 'next/router';\r\nimport { request } from '../utils/api';\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst Index = ({ ctx }) => {\r\n  console.log('index.ctx', ctx);\r\n  const router = useRouter();\r\n  return (\r\n    <>\r\n      <span>index</span>\r\n    </>\r\n  );\r\n};\r\nIndex.getInitialProps = async ({ ctx, reduxStore }) => {\r\n  // const { user } = reduxStore.getState();\r\n  // if (!user || !user.id) {\r\n  //   return {};\r\n  // }\r\n  // const { data: userRepos } = await request(\r\n  //   {\r\n  //     url: '/user/repos',\r\n  //   },\r\n  //   ctx.req,\r\n  //   ctx.res\r\n  // );\r\n  // const { data: starred } = await request(\r\n  //   {\r\n  //     url: '/user/starred',\r\n  //   },\r\n  //   ctx.req,\r\n  //   ctx.res\r\n  // );\r\n  // return {\r\n  //   userRepos,\r\n  //   starred,\r\n  // };\r\n  return ctx;\r\n};\r\n// Index.getInitialProps = async context => {\r\n//   console.log('index页面的context', context);\r\n//   // const result = await api.request({ url: `/user/repos` }, ctx.req, ctx.res);\r\n//   // return {\r\n//   //   userRepos: result.data,\r\n//   //   ctx,\r\n//   // };\r\n//   return context;\r\n// };\r\n\r\nexport default connect(state => ({ user: state.user }))(Index);\r\n"]},"metadata":{},"sourceType":"module"}