{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\search.jsx\";\nimport { withRouter } from 'next/router';\nimport initCache from '../utils/client-cache';\nimport { request } from '../utils/api';\n/**\r\n * search条件：\r\n * sort: 排序方式\r\n * order: 排序升降顺序\r\n * lang: 仓库开发主语言\r\n * page: 分页\r\n */\n\nconst {\n  cache,\n  useCache\n} = initCache({\n  genCacheKeyStrate: context => genCacheKeyStrate(context.ctx.query)\n});\n\nconst Search = ({\n  router,\n  repos\n}) => {\n  console.log('search', repos);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: router.query.query\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nSearch.getInitialProps = cache(async ({\n  ctx\n}) => {\n  const {\n    query,\n    sort,\n    lang,\n    order = 'desc',\n    page\n  } = ctx.query;\n  if (!query) return {\n    repos: {\n      total_count: 0\n    }\n  };\n  let queryString = `?q=${query}`;\n  lang && (queryString += `+language:${lang}`);\n  sort && (queryString += `&sort=${sort}&order=${order}`);\n  page && (queryString += `&page=${page}`);\n  const result = await request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res);\n  return {\n    repos: result.data\n  };\n});\nexport default withRouter(Search);","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/search.jsx"],"names":["withRouter","initCache","request","cache","useCache","genCacheKeyStrate","context","ctx","query","Search","router","repos","console","log","getInitialProps","sort","lang","order","page","total_count","queryString","result","url","req","res","data"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAsBH,SAAS,CAAC;AACpCI,EAAAA,iBAAiB,EAAEC,OAAO,IAAID,iBAAiB,CAACC,OAAO,CAACC,GAAR,CAAYC,KAAb;AADX,CAAD,CAArC;;AAIA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACA,sBACE;AAAA,2BACE;AAAA,gBAAOD,MAAM,CAACF,KAAP,CAAaA;AAApB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAPD;;AASAC,MAAM,CAACK,eAAP,GAAyBX,KAAK,CAAC,OAAO;AAAEI,EAAAA;AAAF,CAAP,KAAmB;AAChD,QAAM;AAAEC,IAAAA,KAAF;AAASO,IAAAA,IAAT;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,KAAK,GAAG,MAA7B;AAAqCC,IAAAA;AAArC,MAA8CX,GAAG,CAACC,KAAxD;AACA,MAAI,CAACA,KAAL,EAAY,OAAO;AAAEG,IAAAA,KAAK,EAAE;AAAEQ,MAAAA,WAAW,EAAE;AAAf;AAAT,GAAP;AAEZ,MAAIC,WAAW,GAAI,MAAKZ,KAAM,EAA9B;AACAQ,EAAAA,IAAI,KAAKI,WAAW,IAAK,aAAYJ,IAAK,EAAtC,CAAJ;AACAD,EAAAA,IAAI,KAAKK,WAAW,IAAK,SAAQL,IAAK,UAASE,KAAM,EAAjD,CAAJ;AACAC,EAAAA,IAAI,KAAKE,WAAW,IAAK,SAAQF,IAAK,EAAlC,CAAJ;AAEA,QAAMG,MAAM,GAAG,MAAMnB,OAAO,CAC1B;AACEoB,IAAAA,GAAG,EAAG,uBAAsBF,WAAY;AAD1C,GAD0B,EAI1Bb,GAAG,CAACgB,GAJsB,EAK1BhB,GAAG,CAACiB,GALsB,CAA5B;AAOA,SAAO;AACLb,IAAAA,KAAK,EAAEU,MAAM,CAACI;AADT,GAAP;AAGD,CAnB6B,CAA9B;AAqBA,eAAezB,UAAU,CAACS,MAAD,CAAzB","sourcesContent":["import { withRouter } from 'next/router';\r\nimport initCache from '../utils/client-cache';\r\nimport { request } from '../utils/api';\r\n\r\n/**\r\n * search条件：\r\n * sort: 排序方式\r\n * order: 排序升降顺序\r\n * lang: 仓库开发主语言\r\n * page: 分页\r\n */\r\n\r\nconst { cache, useCache } = initCache({\r\n  genCacheKeyStrate: context => genCacheKeyStrate(context.ctx.query),\r\n});\r\n\r\nconst Search = ({ router, repos }) => {\r\n  console.log('search', repos);\r\n  return (\r\n    <>\r\n      <span>{router.query.query}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nSearch.getInitialProps = cache(async ({ ctx }) => {\r\n  const { query, sort, lang, order = 'desc', page } = ctx.query;\r\n  if (!query) return { repos: { total_count: 0 } };\r\n\r\n  let queryString = `?q=${query}`;\r\n  lang && (queryString += `+language:${lang}`);\r\n  sort && (queryString += `&sort=${sort}&order=${order}`);\r\n  page && (queryString += `&page=${page}`);\r\n\r\n  const result = await request(\r\n    {\r\n      url: `/search/repositories${queryString}`,\r\n    },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n  return {\r\n    repos: result.data,\r\n  };\r\n});\r\n\r\nexport default withRouter(Search);\r\n"]},"metadata":{},"sourceType":"module"}