{"ast":null,"code":"var _regeneratorRuntime = require(\"E:/MyGit/github-demo/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar axios = require('axios');\n\nvar isServer = false;\nvar GITHUB_BASE_URL = 'https://api.github.com'; // 服务端环境需要手动拼接url\n\nfunction requestGithub(_x, _x2, _x3, _x4) {\n  return _requestGithub.apply(this, arguments);\n}\n\nfunction _requestGithub() {\n  _requestGithub = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, url, data, headers) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (url) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('url must be provided');\n\n          case 2:\n            _context.next = 4;\n            return axios({\n              method: method,\n              url: \"\".concat(GITHUB_BASE_URL).concat(url),\n              data: data,\n              headers: headers\n            });\n\n          case 4:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _requestGithub.apply(this, arguments);\n}\n\nfunction request(_x5, _x6, _x7) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref, req, res) {\n    var _ref$method, method, url, _ref$data, data, session, _ref2, githubAuth, _ref3, access_token, token_type, headers, serverResult, clientResult;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref$method = _ref.method, method = _ref$method === void 0 ? 'GET' : _ref$method, url = _ref.url, _ref$data = _ref.data, data = _ref$data === void 0 ? {} : _ref$data;\n\n            if (!isServer) {\n              _context2.next = 11;\n              break;\n            }\n\n            session = req.session;\n            _ref2 = session || {}, githubAuth = _ref2.githubAuth;\n            _ref3 = githubAuth || {}, access_token = _ref3.access_token, token_type = _ref3.token_type;\n            headers = {};\n\n            if (access_token) {\n              headers.Authorization = \"\".concat(token_type, \" \").concat(access_token);\n            } // 服务端走requestGithub方法，\n            // 补全api的前缀\n\n\n            _context2.next = 9;\n            return requestGithub(method, url, data, headers);\n\n          case 9:\n            serverResult = _context2.sent;\n            return _context2.abrupt(\"return\", serverResult);\n\n          case 11:\n            _context2.next = 13;\n            return axios({\n              method: method,\n              url: \"/github\".concat(url),\n              data: data\n            });\n\n          case 13:\n            clientResult = _context2.sent;\n            return _context2.abrupt(\"return\", clientResult);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _request.apply(this, arguments);\n}\n\nmodule.exports = {\n  request: request,\n  requestGithub: requestGithub\n};","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/api.js"],"names":["axios","require","isServer","GITHUB_BASE_URL","requestGithub","method","url","data","headers","Error","result","request","req","res","session","githubAuth","access_token","token_type","Authorization","serverResult","clientResult","module","exports"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,QAAQ,QAAd;AAEA,IAAMC,eAAe,GAAG,wBAAxB,C,CAEA;;SACeC,a;;;;;4EAAf,iBAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgDC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACOF,GADP;AAAA;AAAA;AAAA;;AAAA,kBAEU,IAAIG,KAAJ,CAAU,sBAAV,CAFV;;AAAA;AAAA;AAAA,mBAIuBT,KAAK,CAAC;AACzBK,cAAAA,MAAM,EAANA,MADyB;AAEzBC,cAAAA,GAAG,YAAKH,eAAL,SAAuBG,GAAvB,CAFsB;AAGzBC,cAAAA,IAAI,EAAJA,IAHyB;AAIzBC,cAAAA,OAAO,EAAPA;AAJyB,aAAD,CAJ5B;;AAAA;AAIQE,YAAAA,MAJR;AAAA,6CAWSA,MAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAceC,O;;;;;sEAAf,wBAA2DC,GAA3D,EAAgEC,GAAhE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAyBR,MAAzB,EAAyBA,MAAzB,4BAAkC,KAAlC,gBAAyCC,GAAzC,QAAyCA,GAAzC,mBAA8CC,IAA9C,EAA8CA,IAA9C,0BAAqD,EAArD;;AAAA,iBACML,QADN;AAAA;AAAA;AAAA;;AAEYY,YAAAA,OAFZ,GAEwBF,GAFxB,CAEYE,OAFZ;AAAA,oBAG2BA,OAAO,IAAI,EAHtC,EAGYC,UAHZ,SAGYA,UAHZ;AAAA,oBAIyCA,UAAU,IAAI,EAJvD,EAIYC,YAJZ,SAIYA,YAJZ,EAI0BC,UAJ1B,SAI0BA,UAJ1B;AAKUT,YAAAA,OALV,GAKoB,EALpB;;AAMI,gBAAIQ,YAAJ,EAAkB;AAChBR,cAAAA,OAAO,CAACU,aAAR,aAA2BD,UAA3B,cAAyCD,YAAzC;AACD,aARL,CASI;AACA;;;AAVJ;AAAA,mBAW+BZ,aAAa,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,CAX5C;;AAAA;AAWUW,YAAAA,YAXV;AAAA,8CAYWA,YAZX;;AAAA;AAAA;AAAA,mBAgB6BnB,KAAK,CAAC;AAC/BK,cAAAA,MAAM,EAANA,MAD+B;AAE/BC,cAAAA,GAAG,mBAAYA,GAAZ,CAF4B;AAG/BC,cAAAA,IAAI,EAAJA;AAH+B,aAAD,CAhBlC;;AAAA;AAgBQa,YAAAA,YAhBR;AAAA,8CAqBSA,YArBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBAC,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,OAAO,EAAPA,OADe;AAEfP,EAAAA,aAAa,EAAbA;AAFe,CAAjB","sourcesContent":["const axios = require('axios');\r\nconst isServer = typeof window === 'undefined';\r\n\r\nconst GITHUB_BASE_URL = 'https://api.github.com';\r\n\r\n// 服务端环境需要手动拼接url\r\nasync function requestGithub(method, url, data, headers) {\r\n  if (!url) {\r\n    throw new Error('url must be provided');\r\n  }\r\n  const result = await axios({\r\n    method,\r\n    url: `${GITHUB_BASE_URL}${url}`,\r\n    data,\r\n    headers,\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nasync function request({ method = 'GET', url, data = {} }, req, res) {\r\n  if (isServer) {\r\n    const { session } = req;\r\n    const { githubAuth } = session || {};\r\n    const { access_token, token_type } = githubAuth || {};\r\n    const headers = {};\r\n    if (access_token) {\r\n      headers.Authorization = `${token_type} ${access_token}`;\r\n    }\r\n    // 服务端走requestGithub方法，\r\n    // 补全api的前缀\r\n    const serverResult = await requestGithub(method, url, data, headers);\r\n    return serverResult;\r\n  }\r\n\r\n  // 客户端需要拼接github前缀 让koa的server可以识别并代理\r\n  const clientResult = await axios({\r\n    method,\r\n    url: `/github${url}`,\r\n    data,\r\n  });\r\n  return clientResult;\r\n}\r\n\r\nmodule.exports = {\r\n  request,\r\n  requestGithub,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}