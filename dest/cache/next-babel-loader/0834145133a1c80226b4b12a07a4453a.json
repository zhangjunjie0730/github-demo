{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\search.jsx\";\nimport { withRouter } from 'next/router';\nimport initCache from '../utils/client-cache';\nimport { request } from '../utils/api';\nimport { LANGUAGES, SORT_TYPES } from '../config';\nimport { Row, Col, List } from 'antd';\n/**\r\n * search条件：\r\n * sort: 排序方式\r\n * order: 排序升降顺序\r\n * lang: 仓库开发主语言\r\n * page: 分页\r\n */\n// const { cache, useCache } = initCache({\n//   genCacheKeyStrate: context => genCacheKeyStrate(context.ctx.query),\n// });\n\nconst Search = ({\n  router,\n  repos\n}) => {\n  const {\n    query\n  } = router;\n  const {\n    sort,\n    order,\n    lang,\n    page = 1\n  } = query;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"root\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 20,\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        span: 6,\n        children: /*#__PURE__*/_jsxDEV(List, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\nSearch.getInitialProps = async ({\n  ctx\n}) => {\n  const {\n    query,\n    sort,\n    lang,\n    order = 'desc',\n    page\n  } = ctx.query;\n  if (!query) return {\n    repos: {\n      total_count: 0\n    }\n  };\n  let queryString = `?q=${query}`;\n  lang && (queryString += `+language:${lang}`);\n  sort && (queryString += `&sort=${sort}&order=${order}`);\n  page && (queryString += `&page=${page}`);\n  const result = await request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res);\n  return {\n    repos: result.data\n  };\n};\n\nexport default withRouter(Search);","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/search.jsx"],"names":["withRouter","initCache","request","LANGUAGES","SORT_TYPES","Row","Col","List","Search","router","repos","query","sort","order","lang","page","getInitialProps","ctx","total_count","queryString","result","url","req","res","data"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,WAAtC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,QAA+B,MAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAYF,MAAlB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,IAAI,GAAG;AAA5B,MAAkCJ,KAAxC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,MAAM,EAAE,EAAb;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,IAAI,EAAE,CAAX;AAAA,+BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAbD;;AAeAH,MAAM,CAACQ,eAAP,GAAyB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAmB;AAC1C,QAAM;AAAEN,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeE,IAAAA,IAAf;AAAqBD,IAAAA,KAAK,GAAG,MAA7B;AAAqCE,IAAAA;AAArC,MAA8CE,GAAG,CAACN,KAAxD;AACA,MAAI,CAACA,KAAL,EAAY,OAAO;AAAED,IAAAA,KAAK,EAAE;AAAEQ,MAAAA,WAAW,EAAE;AAAf;AAAT,GAAP;AAEZ,MAAIC,WAAW,GAAI,MAAKR,KAAM,EAA9B;AACAG,EAAAA,IAAI,KAAKK,WAAW,IAAK,aAAYL,IAAK,EAAtC,CAAJ;AACAF,EAAAA,IAAI,KAAKO,WAAW,IAAK,SAAQP,IAAK,UAASC,KAAM,EAAjD,CAAJ;AACAE,EAAAA,IAAI,KAAKI,WAAW,IAAK,SAAQJ,IAAK,EAAlC,CAAJ;AAEA,QAAMK,MAAM,GAAG,MAAMlB,OAAO,CAC1B;AACEmB,IAAAA,GAAG,EAAG,uBAAsBF,WAAY;AAD1C,GAD0B,EAI1BF,GAAG,CAACK,GAJsB,EAK1BL,GAAG,CAACM,GALsB,CAA5B;AAOA,SAAO;AACLb,IAAAA,KAAK,EAAEU,MAAM,CAACI;AADT,GAAP;AAGD,CAnBD;;AAqBA,eAAexB,UAAU,CAACQ,MAAD,CAAzB","sourcesContent":["import { withRouter } from 'next/router';\r\nimport initCache from '../utils/client-cache';\r\nimport { request } from '../utils/api';\r\nimport { LANGUAGES, SORT_TYPES } from '../config';\r\nimport { Row, Col, List } from 'antd';\r\n\r\n/**\r\n * search条件：\r\n * sort: 排序方式\r\n * order: 排序升降顺序\r\n * lang: 仓库开发主语言\r\n * page: 分页\r\n */\r\n\r\n// const { cache, useCache } = initCache({\r\n//   genCacheKeyStrate: context => genCacheKeyStrate(context.ctx.query),\r\n// });\r\n\r\nconst Search = ({ router, repos }) => {\r\n  const { query } = router;\r\n  const { sort, order, lang, page = 1 } = query;\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <Row gutter={20}>\r\n        <Col span={6}>\r\n          <List></List>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nSearch.getInitialProps = async ({ ctx }) => {\r\n  const { query, sort, lang, order = 'desc', page } = ctx.query;\r\n  if (!query) return { repos: { total_count: 0 } };\r\n\r\n  let queryString = `?q=${query}`;\r\n  lang && (queryString += `+language:${lang}`);\r\n  sort && (queryString += `&sort=${sort}&order=${order}`);\r\n  page && (queryString += `&page=${page}`);\r\n\r\n  const result = await request(\r\n    {\r\n      url: `/search/repositories${queryString}`,\r\n    },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n  return {\r\n    repos: result.data,\r\n  };\r\n};\r\n\r\nexport default withRouter(Search);\r\n"]},"metadata":{},"sourceType":"module"}