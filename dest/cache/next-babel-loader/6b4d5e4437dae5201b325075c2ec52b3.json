{"ast":null,"code":"// import { createStore, combineReducers, applyMiddleware } from 'redux';\n// import thunk from 'redux-thunk';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import { userReducer, userInitialState } from './reducers';\n// const rootReducers = combineReducers({ user: userReducer });\n// /**\n//  * 为什么要导出一个初始化store的方法呢？\n//  * 服务器启动后，所有js都现加载，认为他们是一个模块，这个模块再服务器启动后就已经设定好了。\n//  * 如果不重启服务器，每一次服务端渲染都会使用同一个store对象，这就导致我们的状态改变时不会进行重置\n//  * 如果按照以前的方式export，store会被共用。\n//  * 解决办法：每次渲染时都创建新的store，所以就把with-redux-app这个高阶组件加到根_App中。\n//  */\n// export default function initializeStore(state) {\n//   const store = createStore(\n//     rootReducers,\n//     { ...userInitialState, ...state },\n//     composeWithDevTools(applyMiddleware(thunk))\n//   );\n//   return store;\n// }","map":{"version":3,"sources":["E:/MyGit/github-demo/redux/store.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { createStore, combineReducers, applyMiddleware } from 'redux';\r\n// import thunk from 'redux-thunk';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// import { userReducer, userInitialState } from './reducers';\r\n\r\n// const rootReducers = combineReducers({ user: userReducer });\r\n\r\n// /**\r\n//  * 为什么要导出一个初始化store的方法呢？\r\n//  * 服务器启动后，所有js都现加载，认为他们是一个模块，这个模块再服务器启动后就已经设定好了。\r\n//  * 如果不重启服务器，每一次服务端渲染都会使用同一个store对象，这就导致我们的状态改变时不会进行重置\r\n//  * 如果按照以前的方式export，store会被共用。\r\n//  * 解决办法：每次渲染时都创建新的store，所以就把with-redux-app这个高阶组件加到根_App中。\r\n//  */\r\n\r\n// export default function initializeStore(state) {\r\n//   const store = createStore(\r\n//     rootReducers,\r\n//     { ...userInitialState, ...state },\r\n//     composeWithDevTools(applyMiddleware(thunk))\r\n//   );\r\n//   return store;\r\n// }\r\n"]},"metadata":{},"sourceType":"script"}