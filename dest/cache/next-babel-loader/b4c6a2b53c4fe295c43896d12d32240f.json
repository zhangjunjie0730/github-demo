{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\_app.js\";\nimport React from \"react\";\nimport App, { Container } from 'next/app';\nimport 'antd/dist/antd.css';\nimport { useEffect, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport Router from 'next/router';\nimport Layout from '../components/Layout';\nimport withRedux from '../utils/with-redux-app';\nimport PageLoading from '../components/PageLoading'; // // Component对应pages的每个页面\n// function MyApp(props) {\n//   const { Component, pageProps, reduxStore } = props;\n//   const [loading, setLoading] = useState(false);\n//   const startLoading = () => setLoading(true);\n//   const stopLoading = () => setLoading(false);\n//   useEffect(() => {\n//     Router.events.on('routeChangeStart', startLoading);\n//     Router.events.on('routeChangeComplete', stopLoading);\n//     Router.events.on('routeChangeError', stopLoading);\n//     return () => {\n//       Router.events.off('routeChangeStart', startLoading);\n//       Router.events.off('routeChangeComplete', stopLoading);\n//       Router.events.off('routeChangeError', stopLoading);\n//     };\n//   });\n//   return (\n//     <Container>\n//       <Provider store={reduxStore}>\n//         <Layout>\n//           {loading && <PageLoading />}\n//           <Component {...pageProps} />\n//         </Layout>\n//       </Provider>\n//     </Container>\n//   );\n// }\n// MyApp.getInitialProps = async appContext => {\n//   const appProps = await App.getInitialProps(appContext);\n//   return { ...appProps };\n// };\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      context: 'value',\n      loading: false\n    });\n\n    _defineProperty(this, \"startLoading\", () => {\n      this.setState({\n        loading: true\n      });\n    });\n\n    _defineProperty(this, \"stopLoading\", () => {\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  // App组件的getInitialProps比较特殊\n  // 能拿到一些额外的参数\n  // Component: 被包裹的组件\n  static async getInitialProps(ctx) {\n    const {\n      Component\n    } = ctx;\n    let pageProps = {}; // 拿到Component上定义的getInitialProps\n\n    if (Component.getInitialProps) {\n      // 执行拿到返回结果`\n      pageProps = await Component.getInitialProps(ctx);\n    } // 返回给组件\n\n\n    return {\n      pageProps\n    };\n  }\n\n  componentDidMount() {\n    Router.events.on('routeChangeStart', this.startLoading);\n    Router.events.on('routeChangeComplete', this.stopLoading);\n    Router.events.on('routeChangeError', this.stopLoading);\n  }\n\n  componentWillUnmount() {\n    Router.events.off('routeChangeStart', this.startLoading);\n    Router.events.off('routeChangeComplete', this.stopLoading);\n    Router.events.off('routeChangeError', this.stopLoading);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      reduxStore\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Provider, {\n      store: reduxStore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, this.state.loading && /*#__PURE__*/React.createElement(PageLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n}\n\nexport default withRedux(MyApp); // export default MyApp;","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/_app.js"],"names":["App","Container","useEffect","useState","Provider","Router","Layout","withRedux","PageLoading","MyApp","context","loading","setState","getInitialProps","ctx","Component","pageProps","componentDidMount","events","on","startLoading","stopLoading","componentWillUnmount","off","render","reduxStore","props","state"],"mappings":";;;;AAAA,OAAOA,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AACA,OAAO,oBAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,SAAoBT,GAApB,CAAwB;AAAA;AAAA;;AAAA,mCAoBd;AACNU,MAAAA,OAAO,EAAE,OADH;AAENC,MAAAA,OAAO,EAAE;AAFH,KApBc;;AAAA,0CAyBP,MAAM;AACnB,WAAKC,QAAL,CAAc;AACZD,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KA7BqB;;AAAA,yCA+BR,MAAM;AAClB,WAAKC,QAAL,CAAc;AACZD,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAnCqB;AAAA;;AACtB;AACA;AACA;AACA,eAAaE,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,UAAM;AAAEC,MAAAA;AAAF,QAAgBD,GAAtB;AACA,QAAIE,SAAS,GAAG,EAAhB,CAFgC,CAIhC;;AACA,QAAID,SAAS,CAACF,eAAd,EAA+B;AAC7B;AACAG,MAAAA,SAAS,GAAG,MAAMD,SAAS,CAACF,eAAV,CAA0BC,GAA1B,CAAlB;AACD,KAR+B,CAUhC;;;AACA,WAAO;AACLE,MAAAA;AADK,KAAP;AAGD;;AAmBDC,EAAAA,iBAAiB,GAAG;AAClBZ,IAAAA,MAAM,CAACa,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,KAAKC,YAA1C;AACAf,IAAAA,MAAM,CAACa,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC,KAAKE,WAA7C;AACAhB,IAAAA,MAAM,CAACa,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,KAAKE,WAA1C;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBjB,IAAAA,MAAM,CAACa,MAAP,CAAcK,GAAd,CAAkB,kBAAlB,EAAsC,KAAKH,YAA3C;AACAf,IAAAA,MAAM,CAACa,MAAP,CAAcK,GAAd,CAAkB,qBAAlB,EAAyC,KAAKF,WAA9C;AACAhB,IAAAA,MAAM,CAACa,MAAP,CAAcK,GAAd,CAAkB,kBAAlB,EAAsC,KAAKF,WAA3C;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBS,MAAAA;AAAxB,QAAuC,KAAKC,KAAlD;AACA,wBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAED,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKE,KAAL,CAAWhB,OAAX,iBAAsB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADzB,eAGE,oBAAC,SAAD,eAAeK,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHF,CADF,CADF,CADF;AAWD;;AA9DqB;;AAiExB,eAAeT,SAAS,CAACE,KAAD,CAAxB,C,CACA","sourcesContent":["import App, { Container } from 'next/app';\nimport 'antd/dist/antd.css';\nimport { useEffect, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport Router from 'next/router';\n\nimport Layout from '../components/Layout';\nimport withRedux from '../utils/with-redux-app';\nimport PageLoading from '../components/PageLoading';\n\n// // Component对应pages的每个页面\n// function MyApp(props) {\n//   const { Component, pageProps, reduxStore } = props;\n\n//   const [loading, setLoading] = useState(false);\n\n//   const startLoading = () => setLoading(true);\n//   const stopLoading = () => setLoading(false);\n\n//   useEffect(() => {\n//     Router.events.on('routeChangeStart', startLoading);\n//     Router.events.on('routeChangeComplete', stopLoading);\n//     Router.events.on('routeChangeError', stopLoading);\n//     return () => {\n//       Router.events.off('routeChangeStart', startLoading);\n//       Router.events.off('routeChangeComplete', stopLoading);\n//       Router.events.off('routeChangeError', stopLoading);\n//     };\n//   });\n\n//   return (\n//     <Container>\n//       <Provider store={reduxStore}>\n//         <Layout>\n//           {loading && <PageLoading />}\n//           <Component {...pageProps} />\n//         </Layout>\n//       </Provider>\n//     </Container>\n//   );\n// }\n\n// MyApp.getInitialProps = async appContext => {\n//   const appProps = await App.getInitialProps(appContext);\n//   return { ...appProps };\n// };\nclass MyApp extends App {\n  // App组件的getInitialProps比较特殊\n  // 能拿到一些额外的参数\n  // Component: 被包裹的组件\n  static async getInitialProps(ctx) {\n    const { Component } = ctx;\n    let pageProps = {};\n\n    // 拿到Component上定义的getInitialProps\n    if (Component.getInitialProps) {\n      // 执行拿到返回结果`\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    // 返回给组件\n    return {\n      pageProps,\n    };\n  }\n\n  state = {\n    context: 'value',\n    loading: false,\n  };\n\n  startLoading = () => {\n    this.setState({\n      loading: true,\n    });\n  };\n\n  stopLoading = () => {\n    this.setState({\n      loading: false,\n    });\n  };\n\n  componentDidMount() {\n    Router.events.on('routeChangeStart', this.startLoading);\n    Router.events.on('routeChangeComplete', this.stopLoading);\n    Router.events.on('routeChangeError', this.stopLoading);\n  }\n\n  componentWillUnmount() {\n    Router.events.off('routeChangeStart', this.startLoading);\n    Router.events.off('routeChangeComplete', this.stopLoading);\n    Router.events.off('routeChangeError', this.stopLoading);\n  }\n\n  render() {\n    const { Component, pageProps, reduxStore } = this.props;\n    return (\n      <Container>\n        <Provider store={reduxStore}>\n          <Layout>\n            {this.state.loading && <PageLoading />}\n            {/* 把pageProps解构后传递给组件 */}\n            <Component {...pageProps} />\n          </Layout>\n        </Provider>\n      </Container>\n    );\n  }\n}\n\nexport default withRedux(MyApp);\n// export default MyApp;\n"]},"metadata":{},"sourceType":"module"}