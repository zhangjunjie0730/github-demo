{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\detail\\\\issues.jsx\",\n    _this = this;\n\nimport { request } from '../../utils/api';\n\nvar Issues = function Issues(_ref) {\n  var services = _ref.services;\n  console.log(issues);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"issues\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, _this);\n};\n\n_c = Issues;\n\nIssues.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, _ctx$query, owner, name, _yield$Promise$all, _yield$Promise$all2, issues, labels;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx;\n            _ctx$query = ctx.query, owner = _ctx$query.owner, name = _ctx$query.name;\n            _context.next = 4;\n            return Promise.all([request({\n              url: \"/repos/\".concat(owner, \"/\").concat(name, \"/issues\")\n            }, ctx.req, ctx.res), request({\n              url: \"/repos/\".concat(owner, \"/\").concat(name, \"/labels\")\n            }, ctx.req, ctx.res)]);\n\n          case 4:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            issues = _yield$Promise$all2[0].data;\n            labels = _yield$Promise$all2[1].data;\n            return _context.abrupt(\"return\", {\n              services: {\n                issues: issues,\n                labels: labels\n              }\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Issues;\n\nvar _c;\n\n$RefreshReg$(_c, \"Issues\");","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/detail/issues.jsx"],"names":["request","Issues","services","console","log","issues","getInitialProps","ctx","query","owner","name","Promise","all","url","req","res","data","labels"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,iBAAxB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAHD;;KAAMJ,M;;AAKNA,MAAM,CAACK,eAAP;AAAA,uEAAyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,SAASA,GAAT;AAAA,yBACCA,GAAG,CAACC,KADL,EACfC,KADe,cACfA,KADe,EACRC,IADQ,cACRA,IADQ;AAAA;AAAA,mBAE4BC,OAAO,CAACC,GAAR,CAAY,CAC7DZ,OAAO,CAAC;AAAEa,cAAAA,GAAG,mBAAYJ,KAAZ,cAAqBC,IAArB;AAAL,aAAD,EAA4CH,GAAG,CAACO,GAAhD,EAAqDP,GAAG,CAACQ,GAAzD,CADsD,EAE7Df,OAAO,CAAC;AAAEa,cAAAA,GAAG,mBAAYJ,KAAZ,cAAqBC,IAArB;AAAL,aAAD,EAA4CH,GAAG,CAACO,GAAhD,EAAqDP,GAAG,CAACQ,GAAzD,CAFsD,CAAZ,CAF5B;;AAAA;AAAA;AAAA;AAERV,YAAAA,MAFQ,0BAEdW,IAFc;AAEUC,YAAAA,MAFV,0BAEID,IAFJ;AAAA,6CAOhB;AACLd,cAAAA,QAAQ,EAAE;AACRG,gBAAAA,MAAM,EAANA,MADQ;AAERY,gBAAAA,MAAM,EAANA;AAFQ;AADL,aAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAeA,eAAehB,MAAf","sourcesContent":["import { request } from '../../utils/api';\r\n\r\nconst Issues = ({ services }) => {\r\n  console.log(issues);\r\n  return <span>issues</span>;\r\n};\r\n\r\nIssues.getInitialProps = async ({ ctx }) => {\r\n  const { owner, name } = ctx.query;\r\n  const [{ data: issues }, { data: labels }] = await Promise.all([\r\n    request({ url: `/repos/${owner}/${name}/issues` }, ctx.req, ctx.res),\r\n    request({ url: `/repos/${owner}/${name}/labels` }, ctx.req, ctx.res),\r\n  ]);\r\n\r\n  return {\r\n    services: {\r\n      issues,\r\n      labels,\r\n    },\r\n  };\r\n};\r\n\r\nexport default Issues;\r\n"]},"metadata":{},"sourceType":"module"}