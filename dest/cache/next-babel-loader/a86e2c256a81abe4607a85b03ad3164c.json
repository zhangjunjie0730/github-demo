{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\detail\\\\issues.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from 'next/router';\nimport { genDetailCacheKey, genDetailCacheKeyStrate } from '../../utils';\nimport { request } from '../../utils/api';\nimport initClientCache from '../../utils/client-cache';\n\nvar _initClientCache = initClientCache({\n  genCacheKeyStrate: function genCacheKeyStrate(context) {\n    return genDetailCacheKeyStrate(context);\n  }\n}),\n    cache = _initClientCache.cache,\n    useCache = _initClientCache.useCache;\n\nvar Issues = function Issues(_ref) {\n  _s();\n\n  var services = _ref.services;\n  var router = useRouter();\n  useCache(genDetailCacheKey(router, {\n    services: services\n  }));\n  var issues = services.issues,\n      labels = services.labels;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      creator = _useState2[0],\n      setCreator = _useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"root\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Issues, \"7xlSUI8LjWl3HtiPtZ3Y2UIUYJU=\", false, function () {\n  return [useRouter, useCache];\n});\n\n_c = Issues;\nIssues.getInitialProps = cache( /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, _ctx$query, owner, name, _yield$Promise$all, _yield$Promise$all2, issues, labels;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx;\n            _ctx$query = ctx.query, owner = _ctx$query.owner, name = _ctx$query.name;\n            _context.next = 4;\n            return Promise.all([request({\n              url: \"/repos/\".concat(owner, \"/\").concat(name, \"/issues\")\n            }, ctx.req, ctx.res), request({\n              url: \"/repos/\".concat(owner, \"/\").concat(name, \"/labels\")\n            }, ctx.req, ctx.res)]);\n\n          case 4:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            issues = _yield$Promise$all2[0].data;\n            labels = _yield$Promise$all2[1].data;\n            return _context.abrupt(\"return\", {\n              services: {\n                issues: issues,\n                labels: labels\n              }\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nexport default Issues;\n\nvar _c;\n\n$RefreshReg$(_c, \"Issues\");","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/detail/issues.jsx"],"names":["useRouter","genDetailCacheKey","genDetailCacheKeyStrate","request","initClientCache","genCacheKeyStrate","context","cache","useCache","Issues","services","router","issues","labels","useState","creator","setCreator","getInitialProps","ctx","query","owner","name","Promise","all","url","req","res","data"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,aAA3D;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;;uBAE4BA,eAAe,CAAC;AAC1CC,EAAAA,iBAAiB,EAAE,2BAAAC,OAAO;AAAA,WAAIJ,uBAAuB,CAACI,OAAD,CAA3B;AAAA;AADgB,CAAD,C;IAAnCC,K,oBAAAA,K;IAAOC,Q,oBAAAA,Q;;AAIf,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC/B,MAAMC,MAAM,GAAGX,SAAS,EAAxB;AACAQ,EAAAA,QAAQ,CAACP,iBAAiB,CAACU,MAAD,EAAS;AAAED,IAAAA,QAAQ,EAARA;AAAF,GAAT,CAAlB,CAAR;AAF+B,MAIvBE,MAJuB,GAIJF,QAJI,CAIvBE,MAJuB;AAAA,MAIfC,MAJe,GAIJH,QAJI,CAIfG,MAJe;;AAAA,kBAMDC,QAAQ,EANP;AAAA;AAAA,MAMxBC,OANwB;AAAA,MAMfC,UANe;;AAQ/B,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAbD;;GAAMP,M;UACWT,S,EACfQ,Q;;;KAFIC,M;AAeNA,MAAM,CAACQ,eAAP,GAAyBV,KAAK;AAAA,uEAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASW,YAAAA,GAAT,SAASA,GAAT;AAAA,yBACLA,GAAG,CAACC,KADC,EACrBC,KADqB,cACrBA,KADqB,EACdC,IADc,cACdA,IADc;AAAA;AAAA,mBAEsBC,OAAO,CAACC,GAAR,CAAY,CAC7DpB,OAAO,CAAC;AAAEqB,cAAAA,GAAG,mBAAYJ,KAAZ,cAAqBC,IAArB;AAAL,aAAD,EAA4CH,GAAG,CAACO,GAAhD,EAAqDP,GAAG,CAACQ,GAAzD,CADsD,EAE7DvB,OAAO,CAAC;AAAEqB,cAAAA,GAAG,mBAAYJ,KAAZ,cAAqBC,IAArB;AAAL,aAAD,EAA4CH,GAAG,CAACO,GAAhD,EAAqDP,GAAG,CAACQ,GAAzD,CAFsD,CAAZ,CAFtB;;AAAA;AAAA;AAAA;AAEdd,YAAAA,MAFc,0BAEpBe,IAFoB;AAEId,YAAAA,MAFJ,0BAEFc,IAFE;AAAA,6CAOtB;AACLjB,cAAAA,QAAQ,EAAE;AACRE,gBAAAA,MAAM,EAANA,MADQ;AAERC,gBAAAA,MAAM,EAANA;AAFQ;AADL,aAPsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;;AAAA;AAAA;AAAA;AAAA,IAA9B;AAeA,eAAeJ,MAAf","sourcesContent":["import { useRouter } from 'next/router';\r\nimport { genDetailCacheKey, genDetailCacheKeyStrate } from '../../utils';\r\nimport { request } from '../../utils/api';\r\nimport initClientCache from '../../utils/client-cache';\r\n\r\nconst { cache, useCache } = initClientCache({\r\n  genCacheKeyStrate: context => genDetailCacheKeyStrate(context),\r\n});\r\n\r\nconst Issues = ({ services }) => {\r\n  const router = useRouter();\r\n  useCache(genDetailCacheKey(router, { services }));\r\n\r\n  const { issues, labels } = services;\r\n\r\n  const [creator, setCreator] = useState();\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <div className=\"search\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nIssues.getInitialProps = cache(async ({ ctx }) => {\r\n  const { owner, name } = ctx.query;\r\n  const [{ data: issues }, { data: labels }] = await Promise.all([\r\n    request({ url: `/repos/${owner}/${name}/issues` }, ctx.req, ctx.res),\r\n    request({ url: `/repos/${owner}/${name}/labels` }, ctx.req, ctx.res),\r\n  ]);\r\n\r\n  return {\r\n    services: {\r\n      issues,\r\n      labels,\r\n    },\r\n  };\r\n});\r\n\r\nexport default Issues;\r\n"]},"metadata":{},"sourceType":"module"}