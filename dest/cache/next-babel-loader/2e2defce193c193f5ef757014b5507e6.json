{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\index.jsx\";\nimport getConfig from 'next/config';\nimport { withRouter } from 'next/router';\nimport { request } from '../utils/api';\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst Index = ({\n  userRepos,\n  starred\n}) => {\n  console.log('index.ctx', userRepos, starred);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nIndex.getInitialProps = async ({\n  ctx,\n  reduxStore\n}) => {\n  const {\n    user\n  } = reduxStore.getState();\n\n  if (!user || !user.id) {\n    return {};\n  }\n\n  const {\n    data: userRepos\n  } = await request({\n    url: '/user/repos'\n  }, ctx.req, ctx.res);\n  const {\n    data: starred\n  } = await request({\n    url: '/user/starred'\n  }, ctx.req, ctx.res);\n  return {\n    userRepos,\n    starred\n  };\n};\n\nexport default withRouter(Index);","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/index.jsx"],"names":["getConfig","withRouter","request","publicRuntimeConfig","Index","userRepos","starred","console","log","getInitialProps","ctx","reduxStore","user","getState","id","data","url","req","res"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BH,SAAS,EAAzC;;AAEA,MAAMI,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA4B;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,SAAzB,EAAoCC,OAApC;AACA,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAPD;;AAQAF,KAAK,CAACK,eAAN,GAAwB,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAA+B;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,UAAU,CAACE,QAAX,EAAjB;;AACA,MAAI,CAACD,IAAD,IAAS,CAACA,IAAI,CAACE,EAAnB,EAAuB;AACrB,WAAO,EAAP;AACD;;AACD,QAAM;AAAEC,IAAAA,IAAI,EAAEV;AAAR,MAAsB,MAAMH,OAAO,CACvC;AACEc,IAAAA,GAAG,EAAE;AADP,GADuC,EAIvCN,GAAG,CAACO,GAJmC,EAKvCP,GAAG,CAACQ,GALmC,CAAzC;AAOA,QAAM;AAAEH,IAAAA,IAAI,EAAET;AAAR,MAAoB,MAAMJ,OAAO,CACrC;AACEc,IAAAA,GAAG,EAAE;AADP,GADqC,EAIrCN,GAAG,CAACO,GAJiC,EAKrCP,GAAG,CAACQ,GALiC,CAAvC;AAOA,SAAO;AACLb,IAAAA,SADK;AAELC,IAAAA;AAFK,GAAP;AAID,CAvBD;;AAyBA,eAAeL,UAAU,CAACG,KAAD,CAAzB","sourcesContent":["import getConfig from 'next/config';\r\nimport { withRouter } from 'next/router';\r\nimport { request } from '../utils/api';\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst Index = ({ userRepos, starred }) => {\r\n  console.log('index.ctx', userRepos, starred);\r\n  return (\r\n    <>\r\n      <span>index</span>\r\n    </>\r\n  );\r\n};\r\nIndex.getInitialProps = async ({ ctx, reduxStore }) => {\r\n  const { user } = reduxStore.getState();\r\n  if (!user || !user.id) {\r\n    return {};\r\n  }\r\n  const { data: userRepos } = await request(\r\n    {\r\n      url: '/user/repos',\r\n    },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n  const { data: starred } = await request(\r\n    {\r\n      url: '/user/starred',\r\n    },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n  return {\r\n    userRepos,\r\n    starred,\r\n  };\r\n};\r\n\r\nexport default withRouter(Index);\r\n"]},"metadata":{},"sourceType":"module"}