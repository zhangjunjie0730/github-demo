{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\utils\\\\with-redux-app.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\nimport React from 'react';\nimport App from 'next/app';\nimport initializeStore from '../redux/store';\nvar isServer = typeof window === 'undefined';\nvar __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端执行时都重新创建一个store\n    return initializeStore(initialState);\n  }\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n} // const withRedux = Comp => {\n//   function withReduxApp(props) {\n//     const { Component, pageProps, initialReduxState, ...rest } = props;\n//     return (\n//       <Comp\n//         Component={Component}\n//         pageProps={pageProps}\n//         reduxStore={getOrCreateStore(initialReduxState)}\n//         {...rest}\n//       />\n//     );\n//   }\n//   withReduxApp.getInitialProps = async context => {\n//     let reduxStore;\n//     // 只有在服务端的时候，req才存在\n//     if (isServer) {\n//       const req = context.ctx.req;\n//       const { session } = req;\n//       if (session && session.userInfo) {\n//         reduxStore = getOrCreateStore({\n//           user: session.userInfo,\n//         });\n//       } else {\n//         reduxStore = getOrCreateStore();\n//       }\n//     } else {\n//       reduxStore = getOrCreateStore();\n//     }\n//     context.reduxStore = reduxStore;\n//     // let appProps = {};\n//     // if (typeof Comp.getInitialProps === 'function') {\n//     //   appProps = await Comp.getInitialProps(context);\n//     // }\n//     const appProps = await App.getInitialProps(context);\n//     return {\n//       ...appProps,\n//       initialReduxState: reduxStore.getState(),\n//     };\n//   };\n//   return withReduxApp;\n// };\n// export default withRedux;\n\n\nexport default (function (Comp) {\n  var withReduxApp = /*#__PURE__*/function (_React$Component) {\n    _inherits(withReduxApp, _React$Component);\n\n    var _super = _createSuper(withReduxApp);\n\n    function withReduxApp(props) {\n      var _this;\n\n      _classCallCheck(this, withReduxApp);\n\n      _this = _super.call(this, props); // getInitialProps创建了store 这里为什么又重新创建一次？\n      // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\n      // redux里有很多方法 不适合序列化存储\n      // 所以选择在getInitialProps返回initialReduxState初始的状态\n      // 再在这里通过initialReduxState去创建一个完整的store\n\n      _this.reduxStore = getOrCreateStore(props.initialReduxState);\n      return _this;\n    }\n\n    _createClass(withReduxApp, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            Component = _this$props.Component,\n            pageProps = _this$props.pageProps,\n            rest = _objectWithoutProperties(_this$props, [\"Component\", \"pageProps\"]);\n\n        return /*#__PURE__*/React.createElement(Comp, _extends({}, rest, {\n          Component: Component,\n          pageProps: pageProps,\n          reduxStore: this.reduxStore,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return withReduxApp;\n  }(React.Component); // 这个其实是_app.js的getInitialProps\n  // 在服务端渲染和客户端路由跳转时会被执行\n  // 所以非常适合做redux-store的初始化\n\n\n  withReduxApp.getInitialProps = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n      var reduxStore, req, session, appProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (isServer) {\n                req = ctx.ctx.req;\n                session = req.session;\n\n                if (session && session.userInfo) {\n                  reduxStore = getOrCreateStore({\n                    user: session.userInfo\n                  });\n                } else {\n                  reduxStore = getOrCreateStore();\n                }\n              } else {\n                reduxStore = getOrCreateStore();\n              }\n\n              ctx.reduxStore = reduxStore;\n              appProps = {};\n\n              if (!(typeof Comp.getInitialProps === 'function')) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return Comp.getInitialProps(ctx);\n\n            case 6:\n              appProps = _context.sent;\n\n            case 7:\n              return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                initialReduxState: reduxStore.getState()\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withReduxApp;\n});","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/with-redux-app.js"],"names":["React","App","initializeStore","isServer","window","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","Comp","withReduxApp","props","reduxStore","initialReduxState","Component","pageProps","rest","getInitialProps","ctx","req","session","userInfo","user","appProps","getState"],"mappings":"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","sourcesContent":["/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\r\nimport React from 'react';\r\nimport App from 'next/app';\r\nimport initializeStore from '../redux/store';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\r\n\r\nfunction getOrCreateStore(initialState) {\r\n  if (isServer) {\r\n    // 服务端执行时都重新创建一个store\r\n    return initializeStore(initialState);\r\n  }\r\n  if (!window[__NEXT_REDUX_STORE__]) {\r\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n  }\r\n  return window[__NEXT_REDUX_STORE__];\r\n}\r\n\r\n// const withRedux = Comp => {\r\n//   function withReduxApp(props) {\r\n//     const { Component, pageProps, initialReduxState, ...rest } = props;\r\n//     return (\r\n//       <Comp\r\n//         Component={Component}\r\n//         pageProps={pageProps}\r\n//         reduxStore={getOrCreateStore(initialReduxState)}\r\n//         {...rest}\r\n//       />\r\n//     );\r\n//   }\r\n//   withReduxApp.getInitialProps = async context => {\r\n//     let reduxStore;\r\n//     // 只有在服务端的时候，req才存在\r\n//     if (isServer) {\r\n//       const req = context.ctx.req;\r\n//       const { session } = req;\r\n//       if (session && session.userInfo) {\r\n//         reduxStore = getOrCreateStore({\r\n//           user: session.userInfo,\r\n//         });\r\n//       } else {\r\n//         reduxStore = getOrCreateStore();\r\n//       }\r\n//     } else {\r\n//       reduxStore = getOrCreateStore();\r\n//     }\r\n\r\n//     context.reduxStore = reduxStore;\r\n\r\n//     // let appProps = {};\r\n\r\n//     // if (typeof Comp.getInitialProps === 'function') {\r\n//     //   appProps = await Comp.getInitialProps(context);\r\n//     // }\r\n//     const appProps = await App.getInitialProps(context);\r\n\r\n//     return {\r\n//       ...appProps,\r\n//       initialReduxState: reduxStore.getState(),\r\n//     };\r\n//   };\r\n//   return withReduxApp;\r\n// };\r\n\r\n// export default withRedux;\r\n\r\nexport default Comp => {\r\n  class withReduxApp extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      // getInitialProps创建了store 这里为什么又重新创建一次？\r\n      // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\r\n      // redux里有很多方法 不适合序列化存储\r\n      // 所以选择在getInitialProps返回initialReduxState初始的状态\r\n      // 再在这里通过initialReduxState去创建一个完整的store\r\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\r\n    }\r\n\r\n    render() {\r\n      const { Component, pageProps, ...rest } = this.props;\r\n      return (\r\n        <Comp {...rest} Component={Component} pageProps={pageProps} reduxStore={this.reduxStore} />\r\n      );\r\n    }\r\n  }\r\n\r\n  // 这个其实是_app.js的getInitialProps\r\n  // 在服务端渲染和客户端路由跳转时会被执行\r\n  // 所以非常适合做redux-store的初始化\r\n  withReduxApp.getInitialProps = async ctx => {\r\n    let reduxStore;\r\n\r\n    if (isServer) {\r\n      const {\r\n        ctx: { req },\r\n      } = ctx;\r\n      const { session } = req;\r\n      if (session && session.userInfo) {\r\n        reduxStore = getOrCreateStore({\r\n          user: session.userInfo,\r\n        });\r\n      } else {\r\n        reduxStore = getOrCreateStore();\r\n      }\r\n    } else {\r\n      reduxStore = getOrCreateStore();\r\n    }\r\n\r\n    ctx.reduxStore = reduxStore;\r\n\r\n    let appProps = {};\r\n    if (typeof Comp.getInitialProps === 'function') {\r\n      appProps = await Comp.getInitialProps(ctx);\r\n    }\r\n\r\n    return {\r\n      ...appProps,\r\n      initialReduxState: reduxStore.getState(),\r\n    };\r\n  };\r\n\r\n  return withReduxApp;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}