{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\utils\\\\with-redux-app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\nimport React from 'react';\nimport App from 'next/app';\nimport initializeStore from '../redux/store';\nconst isServer = true;\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端执行时都重新创建一个store\n    return initializeStore(initialState);\n  }\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n/**\r\n * !!注意函数组件不成功！\r\n */\n\n\nexport default (Comp => {\n  // class withReduxApp extends React.Component {\n  //   constructor(props) {\n  //     super(props);\n  //     // getInitialProps创建了store 这里为什么又重新创建一次？\n  //     // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\n  //     // redux里有很多方法 不适合序列化存储\n  //     // 所以选择在getInitialProps返回initialReduxState初始的状态\n  //     // 再在这里通过initialReduxState去创建一个完整的store\n  //     this.reduxStore = getOrCreateStore(props.initialReduxState);\n  //   }\n  //   render() {\n  //     const { Component, pageProps, ...rest } = this.props;\n  //     return (\n  //       <Comp {...rest} Component={Component} pageProps={pageProps} reduxStore={this.reduxStore} />\n  //     );\n  //   }\n  // }\n  // // 这个其实是_app.js的getInitialProps\n  // // 在服务端渲染和客户端路由跳转时会被执行\n  // // 所以非常适合做redux-store的初始化\n  // withReduxApp.getInitialProps = async ctx => {\n  //   let reduxStore;\n  //   if (isServer) {\n  //     const {\n  //       ctx: { req },\n  //     } = ctx;\n  //     const { session } = req;\n  //     if (session && session.userInfo) {\n  //       reduxStore = getOrCreateStore({\n  //         user: session.userInfo,\n  //       });\n  //     } else {\n  //       reduxStore = getOrCreateStore();\n  //     }\n  //   } else {\n  //     reduxStore = getOrCreateStore();\n  //   }\n  //   ctx.reduxStore = reduxStore;\n  //   let appProps = {};\n  //   if (typeof Comp.getInitialProps === 'function') {\n  //     appProps = await Comp.getInitialProps(ctx);\n  //   }\n  //   return {\n  //     ...appProps,\n  //     initialReduxState: reduxStore.getState(),\n  //   };\n  // };\n  const withReduxApp = props => {\n    const {\n      Component,\n      pageProps,\n      initialReduxState\n    } = props,\n          rest = _objectWithoutProperties(props, [\"Component\", \"pageProps\", \"initialReduxState\"]);\n\n    const reduxStore = getOrCreateStore(initialReduxState);\n    return /*#__PURE__*/_jsxDEV(Comp, _objectSpread(_objectSpread({}, rest), {}, {\n      Component: Component,\n      pageProps: pageProps,\n      reduxStore: reduxStore\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }, this);\n  };\n\n  return withReduxApp;\n});","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/with-redux-app.js"],"names":["React","App","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","Comp","withReduxApp","props","Component","pageProps","initialReduxState","rest","reduxStore"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAAqD;;AAErD,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC,MAAIH,QAAJ,EAAc;AACZ;AACA,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACD;;AACD,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AACjCG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACD;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACD;AAED;AACA;AACA;;;AACA,gBAAeI,IAAI,IAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAAuDH,KAA7D;AAAA,UAAoDI,IAApD,4BAA6DJ,KAA7D;;AACA,UAAMK,UAAU,GAAGV,gBAAgB,CAACQ,iBAAD,CAAnC;AACA,wBAAO,QAAC,IAAD,kCAAUC,IAAV;AAAgB,MAAA,SAAS,EAAEH,SAA3B;AAAsC,MAAA,SAAS,EAAEC,SAAjD;AAA4D,MAAA,UAAU,EAAEG;AAAxE;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAJD;;AAMA,SAAON,YAAP;AACD,CA9DD","sourcesContent":["/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\r\nimport React from 'react';\r\nimport App from 'next/app';\r\nimport initializeStore from '../redux/store';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\r\n\r\nfunction getOrCreateStore(initialState) {\r\n  if (isServer) {\r\n    // 服务端执行时都重新创建一个store\r\n    return initializeStore(initialState);\r\n  }\r\n  if (!window[__NEXT_REDUX_STORE__]) {\r\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n  }\r\n  return window[__NEXT_REDUX_STORE__];\r\n}\r\n\r\n/**\r\n * !!注意函数组件不成功！\r\n */\r\nexport default Comp => {\r\n  // class withReduxApp extends React.Component {\r\n  //   constructor(props) {\r\n  //     super(props);\r\n  //     // getInitialProps创建了store 这里为什么又重新创建一次？\r\n  //     // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\r\n  //     // redux里有很多方法 不适合序列化存储\r\n  //     // 所以选择在getInitialProps返回initialReduxState初始的状态\r\n  //     // 再在这里通过initialReduxState去创建一个完整的store\r\n  //     this.reduxStore = getOrCreateStore(props.initialReduxState);\r\n  //   }\r\n\r\n  //   render() {\r\n  //     const { Component, pageProps, ...rest } = this.props;\r\n  //     return (\r\n  //       <Comp {...rest} Component={Component} pageProps={pageProps} reduxStore={this.reduxStore} />\r\n  //     );\r\n  //   }\r\n  // }\r\n\r\n  // // 这个其实是_app.js的getInitialProps\r\n  // // 在服务端渲染和客户端路由跳转时会被执行\r\n  // // 所以非常适合做redux-store的初始化\r\n  // withReduxApp.getInitialProps = async ctx => {\r\n  //   let reduxStore;\r\n\r\n  //   if (isServer) {\r\n  //     const {\r\n  //       ctx: { req },\r\n  //     } = ctx;\r\n  //     const { session } = req;\r\n  //     if (session && session.userInfo) {\r\n  //       reduxStore = getOrCreateStore({\r\n  //         user: session.userInfo,\r\n  //       });\r\n  //     } else {\r\n  //       reduxStore = getOrCreateStore();\r\n  //     }\r\n  //   } else {\r\n  //     reduxStore = getOrCreateStore();\r\n  //   }\r\n\r\n  //   ctx.reduxStore = reduxStore;\r\n\r\n  //   let appProps = {};\r\n  //   if (typeof Comp.getInitialProps === 'function') {\r\n  //     appProps = await Comp.getInitialProps(ctx);\r\n  //   }\r\n\r\n  //   return {\r\n  //     ...appProps,\r\n  //     initialReduxState: reduxStore.getState(),\r\n  //   };\r\n  // };\r\n\r\n  const withReduxApp = props => {\r\n    const { Component, pageProps, initialReduxState, ...rest } = props;\r\n    const reduxStore = getOrCreateStore(initialReduxState);\r\n    return <Comp {...rest} Component={Component} pageProps={pageProps} reduxStore={reduxStore} />;\r\n  };\r\n\r\n  return withReduxApp;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}