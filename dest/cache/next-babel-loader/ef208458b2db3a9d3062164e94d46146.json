{"ast":null,"code":"import _regeneratorRuntime from \"E:/MyGit/github-demo/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MyGit/github-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\index.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { connect } from 'react-redux';\nimport getConfig from 'next/config';\nimport { useRouter } from 'next/router';\nimport api from '../utils/api';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var user = _ref.user,\n      userRepos = _ref.userRepos,\n      ctx = _ref.ctx;\n  var router = useRouter();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(Index, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx;\n            _context.next = 3;\n            return api.request({\n              url: \"/user/repos\"\n            }, ctx.req, ctx.res);\n\n          case 3:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              userRepos: result.data,\n              ctx: ctx\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default connect(function (state) {\n  return {\n    user: state.user\n  };\n})(Index);\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/index.jsx"],"names":["connect","getConfig","useRouter","api","publicRuntimeConfig","Index","user","userRepos","ctx","router","getInitialProps","request","url","req","res","result","data","state"],"mappings":";;;;;;;;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,GAAP,MAAgB,cAAhB;;iBAEgCF,SAAS,E;IAAjCG,mB,cAAAA,mB;;AAER,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA8B;AAAA;;AAAA,MAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,MAArBC,SAAqB,QAArBA,SAAqB;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAC1C,MAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAPD;;GAAMG,K;UACWH,S;;;KADXG,K;;AASNA,KAAK,CAACK,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASF,YAAAA,GAAT,SAASA,GAAT;AAAA;AAAA,mBACDL,GAAG,CAACQ,OAAJ,CAAY;AAAEC,cAAAA,GAAG;AAAL,aAAZ,EAAoCJ,GAAG,CAACK,GAAxC,EAA6CL,GAAG,CAACM,GAAjD,CADC;;AAAA;AAChBC,YAAAA,MADgB;AAAA,6CAEf;AACLR,cAAAA,SAAS,EAAEQ,MAAM,CAACC,IADb;AAELR,cAAAA,GAAG,EAAHA;AAFK,aAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAeR,OAAO,CAAC,UAAAiB,KAAK;AAAA,SAAK;AAAEX,IAAAA,IAAI,EAAEW,KAAK,CAACX;AAAd,GAAL;AAAA,CAAN,CAAP,CAAyCD,KAAzC,CAAf","sourcesContent":["import { connect } from 'react-redux';\r\nimport getConfig from 'next/config';\r\nimport { useRouter } from 'next/router';\r\nimport api from '../utils/api';\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst Index = ({ user, userRepos, ctx }) => {\r\n  const router = useRouter();\r\n  return (\r\n    <>\r\n      <span>index</span>\r\n    </>\r\n  );\r\n};\r\n\r\nIndex.getInitialProps = async ({ ctx }) => {\r\n  const result = await api.request({ url: `/user/repos` }, ctx.req, ctx.res);\r\n  return {\r\n    userRepos: result.data,\r\n    ctx,\r\n  };\r\n};\r\n\r\nexport default connect(state => ({ user: state.user }))(Index);\r\n"]},"metadata":{},"sourceType":"module"}