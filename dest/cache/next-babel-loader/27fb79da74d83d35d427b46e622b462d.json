{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect } from 'react';\nimport LRU from 'lru-cache';\nconst isServer = true;\nconst DEFAULT_CACHE_KEY = 'cache';\nexport default function initClientCache({\n  lruConfig = {},\n  genCacheKeyStrate\n} = {}) {\n  // 默认10分钟缓存\n  const _ref = lruConfig || {},\n        {\n    maxAge = 1000 * 60 * 10\n  } = _ref,\n        restConfig = _objectWithoutProperties(_ref, [\"maxAge\"]);\n\n  const lruCache = new LRU(_objectSpread({\n    maxAge\n  }, restConfig));\n\n  function getCacheKey(context) {\n    return genCacheKeyStrate ? genCacheKeyStrate(context) : DEFAULT_CACHE_KEY;\n  }\n\n  function cache(fn) {\n    // 服务端不能保留缓存 会在多个用户之间共享\n    if (isServer) return fn;\n    return async (...args) => {\n      const key = getCacheKey(...args);\n      const cached = lruCache.get(key);\n\n      if (cached) {\n        return cached;\n      }\n\n      const result = await fn(...args);\n      lruCache.set(key, result);\n      return result;\n    };\n  }\n\n  function setCache(key, cachedData) {\n    lruCache.set(key, cachedData);\n  } // 允许客户端外部手动设置缓存数据\n\n\n  function useCache(key, cachedData) {\n    useEffect(() => {\n      if (!isServer) {\n        setCache(key, cachedData);\n      }\n    }, []);\n  }\n\n  return {\n    cache,\n    useCache,\n    setCache\n  };\n}","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/client-cache.js"],"names":["useEffect","LRU","isServer","DEFAULT_CACHE_KEY","initClientCache","lruConfig","genCacheKeyStrate","maxAge","restConfig","lruCache","getCacheKey","context","cache","fn","args","key","cached","get","result","set","setCache","cachedData","useCache"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,GAAP,MAAgB,WAAhB;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,iBAAiB,GAAG,OAA1B;AACA,eAAe,SAASC,eAAT,CAAyB;AAAEC,EAAAA,SAAS,GAAG,EAAd;AAAkBC,EAAAA;AAAlB,IAAwC,EAAjE,EAAqE;AAClF;AACA,eAAmDD,SAAS,IAAI,EAAhE;AAAA,QAAM;AAAEE,IAAAA,MAAM,GAAG,OAAO,EAAP,GAAY;AAAvB,GAAN;AAAA,QAAoCC,UAApC;;AAEA,QAAMC,QAAQ,GAAG,IAAIR,GAAJ;AACfM,IAAAA;AADe,KAEZC,UAFY,EAAjB;;AAKA,WAASE,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,WAAOL,iBAAiB,GAAGA,iBAAiB,CAACK,OAAD,CAApB,GAAgCR,iBAAxD;AACD;;AAED,WAASS,KAAT,CAAeC,EAAf,EAAmB;AACjB;AACA,QAAIX,QAAJ,EAAc,OAAOW,EAAP;AAEd,WAAO,OAAO,GAAGC,IAAV,KAAmB;AACxB,YAAMC,GAAG,GAAGL,WAAW,CAAC,GAAGI,IAAJ,CAAvB;AACA,YAAME,MAAM,GAAGP,QAAQ,CAACQ,GAAT,CAAaF,GAAb,CAAf;;AACA,UAAIC,MAAJ,EAAY;AACV,eAAOA,MAAP;AACD;;AACD,YAAME,MAAM,GAAG,MAAML,EAAE,CAAC,GAAGC,IAAJ,CAAvB;AACAL,MAAAA,QAAQ,CAACU,GAAT,CAAaJ,GAAb,EAAkBG,MAAlB;AACA,aAAOA,MAAP;AACD,KATD;AAUD;;AAED,WAASE,QAAT,CAAkBL,GAAlB,EAAuBM,UAAvB,EAAmC;AACjCZ,IAAAA,QAAQ,CAACU,GAAT,CAAaJ,GAAb,EAAkBM,UAAlB;AACD,GA/BiF,CAiClF;;;AACA,WAASC,QAAT,CAAkBP,GAAlB,EAAuBM,UAAvB,EAAmC;AACjCrB,IAAAA,SAAS,CAAC,MAAM;AACd,UAAI,CAACE,QAAL,EAAe;AACbkB,QAAAA,QAAQ,CAACL,GAAD,EAAMM,UAAN,CAAR;AACD;AACF,KAJQ,EAIN,EAJM,CAAT;AAKD;;AAED,SAAO;AACLT,IAAAA,KADK;AAELU,IAAAA,QAFK;AAGLF,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useEffect } from 'react';\r\nimport LRU from 'lru-cache';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst DEFAULT_CACHE_KEY = 'cache';\r\nexport default function initClientCache({ lruConfig = {}, genCacheKeyStrate } = {}) {\r\n  // 默认10分钟缓存\r\n  const { maxAge = 1000 * 60 * 10, ...restConfig } = lruConfig || {};\r\n\r\n  const lruCache = new LRU({\r\n    maxAge,\r\n    ...restConfig,\r\n  });\r\n\r\n  function getCacheKey(context) {\r\n    return genCacheKeyStrate ? genCacheKeyStrate(context) : DEFAULT_CACHE_KEY;\r\n  }\r\n\r\n  function cache(fn) {\r\n    // 服务端不能保留缓存 会在多个用户之间共享\r\n    if (isServer) return fn;\r\n\r\n    return async (...args) => {\r\n      const key = getCacheKey(...args);\r\n      const cached = lruCache.get(key);\r\n      if (cached) {\r\n        return cached;\r\n      }\r\n      const result = await fn(...args);\r\n      lruCache.set(key, result);\r\n      return result;\r\n    };\r\n  }\r\n\r\n  function setCache(key, cachedData) {\r\n    lruCache.set(key, cachedData);\r\n  }\r\n\r\n  // 允许客户端外部手动设置缓存数据\r\n  function useCache(key, cachedData) {\r\n    useEffect(() => {\r\n      if (!isServer) {\r\n        setCache(key, cachedData);\r\n      }\r\n    }, []);\r\n  }\r\n\r\n  return {\r\n    cache,\r\n    useCache,\r\n    setCache,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}