{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\utils\\\\with-redux-app.js\";\n\n/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\nimport React from 'react';\nimport App from 'next/app';\nimport initializeStore from '../redux/store';\nvar isServer = typeof window === 'undefined';\nvar __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端执行时都重新创建一个store\n    return initializeStore(initialState);\n  }\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nvar withRedux = function withRedux(Comp) {\n  function withReduxApp(props) {\n    var Component = props.Component,\n        pageProps = props.pageProps,\n        initialReduxState = props.initialReduxState,\n        rest = _objectWithoutProperties(props, [\"Component\", \"pageProps\", \"initialReduxState\"]);\n\n    return /*#__PURE__*/React.createElement(Comp, _extends({\n      Component: Component,\n      pageProps: pageProps,\n      reduxStore: getOrCreateStore(initialReduxState)\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  withReduxApp.getInitialProps = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n      var reduxStore, req, session, appProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // 只有在服务端的时候，req才存在\n              if (isServer) {\n                req = context.ctx.req;\n                session = req.session;\n\n                if (session && session.userInfo) {\n                  reduxStore = getOrCreateStore({\n                    user: session.userInfo\n                  });\n                } else {\n                  reduxStore = getOrCreateStore();\n                }\n              } else {\n                reduxStore = getOrCreateStore();\n              }\n\n              context.reduxStore = reduxStore; // let appProps = {};\n              // if (typeof Comp.getInitialProps === 'function') {\n              //   appProps = await Comp.getInitialProps(context);\n              // }\n\n              _context.next = 4;\n              return App.getInitialProps(context);\n\n            case 4:\n              appProps = _context.sent;\n              return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                initialReduxState: reduxStore.getState()\n              }));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withReduxApp;\n};\n\nexport default withRedux;","map":{"version":3,"sources":["E:/MyGit/github-demo/utils/with-redux-app.js"],"names":["React","App","initializeStore","isServer","window","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","withRedux","Comp","withReduxApp","props","Component","pageProps","initialReduxState","rest","getInitialProps","context","req","ctx","session","userInfo","reduxStore","user","appProps","getState"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA,IAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAnC;AACA,IAAMC,oBAAoB,GAAG,sBAA7B,C,CAAqD;;AAErD,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC,MAAIJ,QAAJ,EAAc;AACZ;AACA,WAAOD,eAAe,CAACK,YAAD,CAAtB;AACD;;AACD,MAAI,CAACH,MAAM,CAACC,oBAAD,CAAX,EAAmC;AACjCD,IAAAA,MAAM,CAACC,oBAAD,CAAN,GAA+BH,eAAe,CAACK,YAAD,CAA9C;AACD;;AACD,SAAOH,MAAM,CAACC,oBAAD,CAAb;AACD;;AAED,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI,EAAI;AACxB,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,QACnBC,SADmB,GACkCD,KADlC,CACnBC,SADmB;AAAA,QACRC,SADQ,GACkCF,KADlC,CACRE,SADQ;AAAA,QACGC,iBADH,GACkCH,KADlC,CACGG,iBADH;AAAA,QACyBC,IADzB,4BACkCJ,KADlC;;AAE3B,wBACE,oBAAC,IAAD;AACE,MAAA,SAAS,EAAEC,SADb;AAEE,MAAA,SAAS,EAAEC,SAFb;AAGE,MAAA,UAAU,EAAEP,gBAAgB,CAACQ,iBAAD;AAH9B,OAIMC,IAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAQD;;AACDL,EAAAA,YAAY,CAACM,eAAb;AAAA,wEAA+B,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7B;AACA,kBAAId,QAAJ,EAAc;AACNe,gBAAAA,GADM,GACAD,OAAO,CAACE,GAAR,CAAYD,GADZ;AAEJE,gBAAAA,OAFI,GAEQF,GAFR,CAEJE,OAFI;;AAGZ,oBAAIA,OAAO,IAAIA,OAAO,CAACC,QAAvB,EAAiC;AAC/BC,kBAAAA,UAAU,GAAGhB,gBAAgB,CAAC;AAC5BiB,oBAAAA,IAAI,EAAEH,OAAO,CAACC;AADc,mBAAD,CAA7B;AAGD,iBAJD,MAIO;AACLC,kBAAAA,UAAU,GAAGhB,gBAAgB,EAA7B;AACD;AACF,eAVD,MAUO;AACLgB,gBAAAA,UAAU,GAAGhB,gBAAgB,EAA7B;AACD;;AAEDW,cAAAA,OAAO,CAACK,UAAR,GAAqBA,UAArB,CAjB6B,CAmB7B;AAEA;AACA;AACA;;AAvB6B;AAAA,qBAwBNrB,GAAG,CAACe,eAAJ,CAAoBC,OAApB,CAxBM;;AAAA;AAwBvBO,cAAAA,QAxBuB;AAAA,iEA2BxBA,QA3BwB;AA4B3BV,gBAAAA,iBAAiB,EAAEQ,UAAU,CAACG,QAAX;AA5BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA;;AA+BA,SAAOf,YAAP;AACD,CA5CD;;AA8CA,eAAeF,SAAf","sourcesContent":["/** 这个HOC的意义\r\n * 因为服务端执行了getInitialProps之后，返回给客户端的是序列化的字符串\r\n * redux里面有很多方法，不适合序列化存储\r\n * 所以在getInitialProps之后返回initialReduxState\r\n * 再通过initialReduxState去创建完整的store\r\n * 但是为了性能，客户端每次执行该方法的时候都去找一下window对象里面时候已经有了store\r\n */\r\nimport React from 'react';\r\nimport App from 'next/app';\r\nimport initializeStore from '../redux/store';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; // 存储在window中表示window已经有了store\r\n\r\nfunction getOrCreateStore(initialState) {\r\n  if (isServer) {\r\n    // 服务端执行时都重新创建一个store\r\n    return initializeStore(initialState);\r\n  }\r\n  if (!window[__NEXT_REDUX_STORE__]) {\r\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n  }\r\n  return window[__NEXT_REDUX_STORE__];\r\n}\r\n\r\nconst withRedux = Comp => {\r\n  function withReduxApp(props) {\r\n    const { Component, pageProps, initialReduxState, ...rest } = props;\r\n    return (\r\n      <Comp\r\n        Component={Component}\r\n        pageProps={pageProps}\r\n        reduxStore={getOrCreateStore(initialReduxState)}\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n  withReduxApp.getInitialProps = async context => {\r\n    let reduxStore;\r\n    // 只有在服务端的时候，req才存在\r\n    if (isServer) {\r\n      const req = context.ctx.req;\r\n      const { session } = req;\r\n      if (session && session.userInfo) {\r\n        reduxStore = getOrCreateStore({\r\n          user: session.userInfo,\r\n        });\r\n      } else {\r\n        reduxStore = getOrCreateStore();\r\n      }\r\n    } else {\r\n      reduxStore = getOrCreateStore();\r\n    }\r\n\r\n    context.reduxStore = reduxStore;\r\n\r\n    // let appProps = {};\r\n\r\n    // if (typeof Comp.getInitialProps === 'function') {\r\n    //   appProps = await Comp.getInitialProps(context);\r\n    // }\r\n    const appProps = await App.getInitialProps(context);\r\n\r\n    return {\r\n      ...appProps,\r\n      initialReduxState: reduxStore.getState(),\r\n    };\r\n  };\r\n  return withReduxApp;\r\n};\r\n\r\nexport default withRedux;\r\n"]},"metadata":{},"sourceType":"module"}