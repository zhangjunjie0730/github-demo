{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\MyGit\\\\github-demo\\\\pages\\\\search.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { withRouter } from 'next/router';\nimport classNames from 'classnames';\nimport initCache from '../utils/client-cache';\nimport { request } from '../utils/api';\nimport { LANGUAGES, SORT_TYPES } from '../config';\nimport FilterLink from '../components/FilterLink';\nimport { Row, Col, List } from 'antd';\n/**\r\n * search条件：\r\n * sort: 排序方式\r\n * order: 排序升降顺序\r\n * lang: 仓库开发主语言\r\n * page: 分页\r\n */\n// const { cache, useCache } = initCache({\n//   genCacheKeyStrate: context => genCacheKeyStrate(context.ctx.query),\n// });\n\nconst Search = ({\n  router,\n  repos\n}) => {\n  const {\n    query\n  } = router;\n  const {\n    sort,\n    order,\n    lang,\n    page = 1\n  } = query;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"root\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 20,\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        span: 6,\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          bordered: true,\n          style: {\n            marginBottom: 20\n          },\n          dataSource: LANGUAGES,\n          header: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"list-header\",\n            children: \"\\u8BED\\u8A00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 21\n          }, this),\n          renderItem: language => {\n            const selected = lang === language;\n            return /*#__PURE__*/_jsxDEV(List.Item, {\n              className: classNames({\n                selected\n              }),\n              children: /*#__PURE__*/_jsxDEV(FilterLink, _objectSpread(_objectSpread({}, router.query), {}, {\n                selected: selected,\n                lang: language,\n                children: language\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          bordered: true,\n          style: {\n            marginBottom: 20\n          },\n          dataSource: {\n            SORT_TYPES\n          },\n          header: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"list-header\",\n            children: \"\\u6392\\u5E8F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this),\n          renderItem: sortItem => {\n            const {\n              name: itemName,\n              sort: itemSort,\n              order: itemOrder\n            } = sortItem;\n            let selected = false;\n\n            if (itemName === 'Best Match' && !sort) {\n              selected = true;\n            } else if (itemSort === sort && itemOrder === order) {\n              selected = true;\n            }\n\n            return /*#__PURE__*/_jsxDEV(List.Item, {\n              className: classNames({\n                selected\n              }),\n              children: /*#__PURE__*/_jsxDEV(FilterLink, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\nSearch.getInitialProps = async ({\n  ctx\n}) => {\n  const {\n    query,\n    sort,\n    lang,\n    order = 'desc',\n    page\n  } = ctx.query;\n  if (!query) return {\n    repos: {\n      total_count: 0\n    }\n  };\n  let queryString = `?q=${query}`;\n  lang && (queryString += `+language:${lang}`);\n  sort && (queryString += `&sort=${sort}&order=${order}`);\n  page && (queryString += `&page=${page}`);\n  const result = await request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res);\n  return {\n    repos: result.data\n  };\n};\n\nexport default withRouter(Search);","map":{"version":3,"sources":["E:/MyGit/github-demo/pages/search.jsx"],"names":["withRouter","classNames","initCache","request","LANGUAGES","SORT_TYPES","FilterLink","Row","Col","List","Search","router","repos","query","sort","order","lang","page","marginBottom","language","selected","sortItem","name","itemName","itemSort","itemOrder","getInitialProps","ctx","total_count","queryString","result","url","req","res","data"],"mappings":"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","sourcesContent":["import { withRouter } from 'next/router';\r\nimport classNames from 'classnames';\r\nimport initCache from '../utils/client-cache';\r\nimport { request } from '../utils/api';\r\nimport { LANGUAGES, SORT_TYPES } from '../config';\r\nimport FilterLink from '../components/FilterLink';\r\nimport { Row, Col, List } from 'antd';\r\n\r\n/**\r\n * search条件：\r\n * sort: 排序方式\r\n * order: 排序升降顺序\r\n * lang: 仓库开发主语言\r\n * page: 分页\r\n */\r\n\r\n// const { cache, useCache } = initCache({\r\n//   genCacheKeyStrate: context => genCacheKeyStrate(context.ctx.query),\r\n// });\r\n\r\nconst Search = ({ router, repos }) => {\r\n  const { query } = router;\r\n  const { sort, order, lang, page = 1 } = query;\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <Row gutter={20}>\r\n        <Col span={6}>\r\n          {/* Language Categories */}\r\n          <List\r\n            bordered\r\n            style={{ marginBottom: 20 }}\r\n            dataSource={LANGUAGES}\r\n            header={<span className=\"list-header\">语言</span>}\r\n            renderItem={language => {\r\n              const selected = lang === language;\r\n              return (\r\n                <List.Item className={classNames({ selected })}>\r\n                  <FilterLink {...router.query} selected={selected} lang={language}>\r\n                    {language}\r\n                  </FilterLink>\r\n                </List.Item>\r\n              );\r\n            }}\r\n          />\r\n          {/* Sort Categories */}\r\n          <List\r\n            bordered\r\n            style={{ marginBottom: 20 }}\r\n            dataSource={{ SORT_TYPES }}\r\n            header={<span className=\"list-header\">排序</span>}\r\n            renderItem={sortItem => {\r\n              const { name: itemName, sort: itemSort, order: itemOrder } = sortItem;\r\n              let selected = false;\r\n              if (itemName === 'Best Match' && !sort) {\r\n                selected = true;\r\n              } else if (itemSort === sort && itemOrder === order) {\r\n                selected = true;\r\n              }\r\n              return (\r\n                <List.Item className={classNames({ selected })}>\r\n                  <FilterLink />\r\n                </List.Item>\r\n              );\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nSearch.getInitialProps = async ({ ctx }) => {\r\n  const { query, sort, lang, order = 'desc', page } = ctx.query;\r\n  if (!query) return { repos: { total_count: 0 } };\r\n\r\n  let queryString = `?q=${query}`;\r\n  lang && (queryString += `+language:${lang}`);\r\n  sort && (queryString += `&sort=${sort}&order=${order}`);\r\n  page && (queryString += `&page=${page}`);\r\n\r\n  const result = await request(\r\n    {\r\n      url: `/search/repositories${queryString}`,\r\n    },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n  return {\r\n    repos: result.data,\r\n  };\r\n};\r\n\r\nexport default withRouter(Search);\r\n"]},"metadata":{},"sourceType":"module"}